#!/bin/bash
	exec l1 -e strace_main "$0" "$@"
	exit 1
!#

/* 1% of strace */
/* this is not personality aware at all */

@include <fs.cqct>
@include <sys.cqct>
@include <syslib.cqct>

mrn=myrootns();
ptrace_names_x86_64 = @names mrn {
	struct siginfo {
		@0 int si_signo;
		@4 int si_errno;
		@8 int si_code;
		@12;
	};

	// from sys/user.h on x86_64 linux
	typedef unsigned short __uint16_t;
	typedef unsigned long __uint64_t;
	typedef unsigned int __uint32_t;

	// x86_64
	struct user_fp_regs_struct
	{
		__uint16_t            cwd;
		__uint16_t            swd;
		__uint16_t            ftw;
		__uint16_t            fop;
		__uint64_t            rip;
		__uint64_t            rdp;
		__uint32_t            mxcsr;
		__uint32_t            mxcr_mask;
		__uint32_t            st_space[32];   /* 8*16 bytes for each FP-reg = 128 bytes */
		__uint32_t            xmm_space[64];  /* 16*16 bytes for each XMM-reg = 256 bytes */
		__uint32_t            padding[24];
	};

	struct user_regs_struct
	{
		@0 unsigned long r15;
		@8 unsigned long r14;
		@16 unsigned long r13;
		@24 unsigned long r12;
		@32 unsigned long rbp;
		@40 unsigned long rbx;
		@48 unsigned long r11;
		@56 unsigned long r10;
		@64 unsigned long r9;
		@72 unsigned long r8;
		@80 unsigned long rax;
		@88 unsigned long rcx;
		@96 unsigned long rdx;
		@104 unsigned long rsi;
		@112 unsigned long rdi;
		@120 unsigned long orig_rax;
		@128 unsigned long rip;
		@136 unsigned long cs;
		@144 unsigned long eflags;
		@152 unsigned long rsp;
		@160 unsigned long ss;
		@168 unsigned long fs_base;
		@176 unsigned long gs_base;
		@184 unsigned long ds;
		@192 unsigned long es;
		@200 unsigned long fs;
		@208 unsigned long gs;
		@216;
	};
};

a=uname()[3];

@global ptrace_names;
if(a == "x86_64")
	ptrace_names = ptrace_names_x86_64;
else
	error("no ptrace_names for %s\n",a);

@global callnames;
callnames=[:];
{
	@local foo;
	foo=@typeof(enum unix`syscall_nr);
	foreach(@lambda(v) {
		callnames[v[1]]=v[0];
	},enumconsts(foo));
}

@global prototypes;
prototypes=[:];
prototypes['access]=['str,'int];
prototypes['close]=['fd];
prototypes['connect]=['fd,'addr,'int];
prototypes['execve]=['str,'addr,'addr];
prototypes['fstat]=['fd,nil];
prototypes['getdents]=['fd,'addr,'int];
prototypes['kill]=['int,'int];
prototypes['lgetxattr]=['str,'str,'int,'int];
prototypes['lseek]=['fd,'int,'int];
prototypes['lstat]=['str,nil];
prototypes['mmap]=['addr,'int,'int,'int,'fd,'int];
prototypes['mprotect]=['addr,'int,'int];
prototypes['munmap]=['addr,'int];
prototypes['open]=['str,'int,'int];
prototypes['read]=['fd,nil,'int];
prototypes['recvfrom]=['fd,'addr,'int,'int,'addr,'addr];
prototypes['sendto]=['fd,'addr,'int,'int,'addr,'int];
prototypes['stat]=['str];
prototypes['write]=['fd,nil,'int];

@define strace_main(progname, args ...) {
	@local p,r,b;
	@local states;
	@local getstr;
	@local demarshal;

	states=[:];

	@define demarshal(regs) {
		@local name,p,x,l,v;

		name=callnames[regs->orig_rax];

		//%rdi, %rsi, %rdx, %r10, %r8 and %r9
		if(!name) {
			printf("syscall_%d(...) ",regs->orig_rax);
			return;
		}
		p=prototypes[name];
		if(p) {
			l=length(p);
			printf("%a( ",name);
			for(x=0;x<l;x++) {
				switch(x) {
				case 0: v=regs->rdi; break;
				case 1: v=regs->rsi; break;
				case 2: v=regs->rdx; break;
				case 3: v=regs->r10; break;
				case 4: v=regs->r8; break;
				case 5: v=regs->r9; break;
				default:
					error("too many arguments");
				}
				if(p[x]=='fd) {
					printf("%d,",v);
				} else if(p[x]=='int) {
					printf("%d,",(long)v);
				} else if(p[x]=='addr) {
					printf("0x%x,",v);
				} else if(p[x]=='str) {
					printf("%s,",getstr(v));
				} else if(!p[x]) {
					printf("???,");
				} else {
					printf("UNKNOWN ARGUMENT TYPE %a\n",p[x]);
				}
			}
			printf(") ");
		} else
			printf("%a(...) ",name);
	}

	if(length(args) == 0) {
		fprintf(stderr,"%s <target_prog> [<target arg> ...]\n",progname);
		sys_exit(1);
	}

	b=which(args[0]);
	if(!b) {
		fprintf(stderr,"%s: could not find %s in search path\n",progname,args[0]);
		sys_exit(1);
	}

	getstr=@lambda(addr) {
		@local buf,r,x,rstr,s,c;

		addr=(void *)addr;
		rstr="";
		buf=(mrn`long *)malloc(1024);
		s=sizeof(mrn`long);
		while(1) {
			r=syscall(unix`ptrace,unix`PTRACE_PEEKDATA,p,addr,buf);
			addr+=s;
			if(r) {
				fprintf(stderr,"getstr failed\n");
				goto done;
			} else {
				for(x=0;x<sizeof(*buf);x++) {
					c=*((unsigned char *)buf+x);
					if(c) 
						rstr+=sprintfa("%c",c);
					else
						goto done;
				}
			}
		}
		done:
		return rstr;
	};

	p=sys_fork();
	if(p == -1) {
		fprintf(stderr,"%s: fork failed\n",progname);
		sys_exit(1);	
	}

	if(!p) {
		r=syscall(unix`ptrace,unix`PTRACE_TRACEME,0,0,0);
		if(r) {
			fprintf(stderr,"traceme fails\n");
			sys_exit(1);
		}

		syscall(unix`kill,getpid(),unix`SIGSTOP);

		applyk(@lambda() {
			sys_execve(b,args,environ());
		},@lambda(args ...) {
			sys_exit(1);
		},@lambda(args ...) {
			sys_exit(1);
		},[]);
	} else {
		@local cp,ocp,m,m2;

		m=malloc(1024);

		while(1) {
			r=syscall(unix`wait4,p,m,0,0);

			if(r==-1)
				break;

			ocp=cp;
			cp=r;

			if(!states[cp]) {
				states[cp]='entry;
			}

			if( (cp != ocp) ) {
				if(states[ocp] == 'entry)
					printf(" <interrupted>\n"); 
				if(states[cp] == 'exit)
					printf("<resumed> "); 
			}

			if(states[cp] == 'entry) {
				states[cp]='exit;

				r=syscall(unix`ptrace,unix`PTRACE_GETREGS,p,0,m);
				if(r) {
					fprintf(stderr,"getregs failed for child %d with %d\n",p,r);
					continue;
				}
				m2=(struct user_regs_struct *){mkdom(ptrace_names,asof(m))}m;
				printf("%a ",cp);
				demarshal(m2);
			} else if(states[cp] == 'exit) {
				states[cp]='entry;

				r=syscall(unix`ptrace,unix`PTRACE_GETREGS,p,0,m);
				if(r) {
					fprintf(stderr,"getregs failed for child %d with %d\n",p,r);
					continue;
				}
				m2=(struct user_regs_struct *){mkdom(ptrace_names,asof(m))}m;
				printf("= %d\n",m2->rax);
			}

			r=syscall(unix`ptrace,unix`PTRACE_SYSCALL,p,0,0);
			if(r) {
				fprintf(stderr,"ptrace PTRACE_SYSCALL failed for pid %d\n",p);
			}
		}
	}
}

