define printtype(t){
	@local ct, i, fld, flds, sz, off;

	ct = cracktype(t);
	if(isstruct(t) || isunion(t)){
		printf("%s %s {\n", vecref(ct, 0), vecref(ct, 1));
		flds = vecref(ct, 2);
		for(i = 0; i < veclen(flds); i++){
			fld = vecref(flds, i);
			off = vecref(fld, 2);
			if(!isnil(off))
				printf("\t@0x%x", off);
			else
				printf("\t");
			printf("\t%t;\n", fld);
		}
		sz = vecref(ct, 3);
		if(!isnil(sz))
			printf("\t@0x%x;\n", vecref(ct, 3));
		printf("};\n");
	}else if(istypedef(t))
		printf("typedef %t;\n", ct);
};


define foo(){
	@local ns, fn, tab, vec, i;

	ns = @names c32le {
		typedef struct foo foo;
		struct abc {
			int a;
		};
		struct foo {
			@0x00 int x;
			@0x04 int y;
			@0x08 int z;
			@0x0c int *xp;
			@0x10 int (*foo)();
			@0x14 int (*bar)(void);
			@0x18 int (*baz)(int p1);
			@0x20 int (*baz)(int p1, struct foo *p2);
			@0x28 struct abc bar;
			@0x24+10*4 char *a[10];
			@0x28;
		};
		struct bar {
			@0x0 int x, y;
		};
		struct foo a;
	};

	fn = nsenumtype(ns);
	vec = tabvals(fn());
	for(i = 0; i < veclen(vec); i++)
		printtype(vecref(vec, i));
};

foo();
