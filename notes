todo
----
- core functionality
  - string processing (including ascii<->binary help)
  - other string functions
    strcata
  - formatted printing:
	- with widths (and precisions)
  - switch enum operands shortform
  - introduce address types
    - shouldn't bpset take an address argument?
  - figure out interactive control story:
  	- fast exit
  	- interruption
    interactions of signals with threads?
    gc state vs exit and interruption
    useful for blocking/polling on remote events
  - optional names for as, ns, and dom
    - display names in errors such as "undefined type"
  - does pointer conversion make sense when type comes from a domain
    with different pointer size?
    e.g.:
	t = dom32.ns.looktype(T*)
	v = {t}<dom64,.,val>
        now v is a 32-bit pointer in a 64-bit domain
        certainly it does not make sense when structs containing
        pointers are carried over.
        seems too unusual to handle in a special way; instead,
	should just note the problem.
  - i/o on pointer arguments:
	if buffer for sprintf, read, or write, is a pointer, then
        do the i/o directly on the domain.
  - make cval and put instructions callable
  - isundefined
  - rename istypename to isctype
  - move most thunks to builtins, clean up instruction set
  - ; 'a';
    <cval 97> // do 'a' instead
  - foreach as @foreach syntax with break and continue
  - callcc broken: cannot invoke continuation in different dovm frame
    from one in which it was taken.

- usability
  - check "entry" to "toplevel"
  - print the original source for a lambda
  - use-before-define analysis

- robustness
  - can we programmatically dump all fields in a struct, even
    if there are bitfields?  would be a nice example.
  - handle stack overflow
  - @include at interactive prompt confusingly does not necessarily
    print the value of the last expression:
	x = 2;
	y = 5;
	z = x;
    ... probably because their is no mechanism to force the
    final statement to have its value returned.
    ideally, want return E for all E that can be final expression.
  - how to define strings of length 2^64?
  - check for negative cvals on Irange, Istr, Islice*, Ivec*, etc.
  - change all thunks that do not return values to return nil
  - cleanup and recover from parse/compiler errors
	-> compile-local context for program, memory, recovery
  - while(1); should run in constant memory but it does not.
    problem seems to be that mutator can alloc new cvalues
    faster than gc can put them back onto the freelist.

    potential solution: block halloc from allocating new memory
         until one of more gc epoch has finished;
         then retry.
         need to be careful about not restarting gc, because
         existing invariant holds that dovm is a gc epoch barrier.

  - all type deconstructors (e.g., fields) need to check for
    type attributes that are not required for constructors
  - why do vmerr backtraces include entry, but not fatal ones?
  - why doesn't inline fn call work:  lambda(x){ printf("%d\n"); }()
  - this draws confusing diagnostic:
    	tab = mktab(); print("%d\n", tab->len);
  - rationalize MAX and max()
  - what domain are cvals in symbol offsets in name spaces?
    for actual symbols (not consts), should they be Vptr in containing ns?
    can dorawns perform this cast?
  - also: verify that address range calculations wrap correctly in
    32-bit contexts
  - do we need to writebarrier other assignments?
	- change to vm->cl?
	- set!s to toplevel vars?
	- non-boxed writes to stack?
    => NO! these are all captured as part of root set at start of gc
  - sizeof x works?
  - does lookaddr constructor sort only symbols (not enums?)
  - detect re-use of tags like k.scm does
  - sizeof(t) errors if t references an undefined subtype;
    we need a simple test for whether a type has such a reference.

- check semantics of scope

  old cqct: var refs create binding in nearest
  lexical scope, unless there is already a binding
  in outer scope, or a top-level binding.

  new cqct: harder to determine at compile time
  whether there is a toplevel binding (really?);
  also, i don't think there is a mechanism to
  add new local bindings to a lambda.

- performance/simplicity
  - consider making routines like nsptr take a cvalue argument
    to avoid intermediate domof calls (they already accept domains)
  - apply is expensive
  - can we remove a level of box indirection on compile0 output?

    how to make it gc-safe? (i.e., without boxes, old values will be
    clobbered w/o being made a root, violating snapshot-at-beginning).

    see imp3, section 4.5, page 101.
    we can detect that our tmp vars (!*)
    are not captured by any closures
    below.
    
    we cannot determine that the functions
    will not capture continuations.
    what are the consequences?
    seems like worse case is that
    resumed continuation would get
    old value of vars...which might
    be the right thing, since these
    are implicit variables.
    
    probably should aggressively
    shadow on the way down, to reduce
    unwanted boxing.
  - simplify labels in cg

- ideas
  - immutable vectors for type datastructures (fields and params)?
  - immutable strings for pre-computed "$get", etc?
  - vector() seems to take arguments in reverse order, which is
    confusing to see in compile0 output...why is this?
  - BISONFLAW:
      whether bison, when building a glr parser, includes the c.y
      prologue is version sensitive (it does in bison 2.3 but not others)
      so we do the #ifdef dance around the headers shared by c.y and c.l.
  - be more flexible about requiring aggregate size and field offsets
    tolerate their absence; raise errors when they are needed.
  - system domain:
	read-only for all but "user controls", e.g., flags.
	get address space layout from os
	with adequate /proc, can we do with just builtin access to ptr 0?

- grammar
  - sort out problems with odd rule about int(int) in abstract declarators;

other systems
-------------

inferno
- inferno/libinterp/xec.c - vm interpreter
  does gc ever actually run in parallel?  does vm ever use more
  than one host thread concurrently?
- check out inferno discussion jun 3 2008 on refs

dtrace
- ctf
- object code

emmett

parsers
- antlr/peg
