/*
    Convenience functions for working with strings
*/
@global strtoupper, strtolower, unistrtostr, utf16toutf8, utf8toutf16;
{
// convert cqct string to all upper case
@define strtoupper(s) {
    @local i,ret;

    ret = mkstr(length(s));
    for (i = 0; i < length(s); i++) {
        ret[i] = toupper(s[i]);
    }

    return ret;
}


// convert cqct string to all lower case
@define strtolower(s) {
    @local i,ret;

    ret = mkstr(length(s));
    for (i = 0; i < length(s); i++) {
        ret[i] = tolower(s[i]);
    }

    return ret;
}


// Pull the string out of a windows UNICODE_STRING struct
@define unistrtostr (uni) {
    @local maxlen;

    maxlen = uni->Length;
    if (maxlen > 512) {
        fprintf(stderr,"WARNING: unistrtostr had extraordinarily long string"
	        "(%d), converted only first 512 bytes", maxlen);
	maxlen = 512;
    }
 
    if (ismapped(uni) && ismapped(uni->Buffer,maxlen)) {
        return utf16toutf8((char *)uni->Buffer, maxlen);
    } else {
        return nil;
    }
}


// Attempt to convert a string of 16 bit chars to one of 8 bit chars
//  where each new char is the ASCII version of the 16 bit one.
//  warn when no ASCII version is possible
@define utf16toutf8(ptr,len...) {
    @local retstr, i, warned;

    if (length(len) > 0) {
        len = len[0];
    } else if (isstring(ptr)) {
        len = length(ptr);
    } else {
        len = nil;
    }

    ptr = (char *)ptr;
    retstr = "";
    warned = 0;
    for (i=0; len == nil || i<len; i+=2) {
        if (ptr[i+1] != 0 && !warned) {
	    warned = 1;
        }
	if (len == nil && ptr[i] == 0) break;
	retstr=retstr+getbytes(ptr+i,1);
    }

    if (warned) {
        fprintf(stderr,"WARNING: utf16toutf8 conversion included non ASCII"
	        " wide character in string %B\n",retstr);
    }

    return retstr;
}

// Convert a string of 8 bit chars to one of 16 bit chars
//  where each new char has second 8 bits all 0
@define utf8toutf16(ptr,len...) {
    @local retstr, i;

    if (length(len) > 0) {
        len = len[0];
    } else if (isstring(ptr)) {
        len = length(ptr);
    } else {
        len = nil;
    }

    ptr = (char *)ptr;
    retstr = mkstr(2*len);
    for (i=0; i<len; i+=1) {
        retstr[i*2] = ptr[i];
        retstr[i*2+1] = 0;
    }

    return retstr;
}
}