/* native syscall replacements for system functions in l1 */
@include <inet.cqct>
@include <sys.cqct>

@define _munmap(addr, len) {
	sys_munmap(addr ,len);

	return nil;
}

@define _mapfile(filename, rest ...) {
	@local fd,st,p,s,m,f,fm;

	m = 0;
	f = unix`MAP_PRIVATE;
	if(length(rest) > 0) {
		@local mode;

		mode = rest[0];
		if(!isstring(mode))
			error("mode is not a string");

		if(!isnil(strstr(mode,"p"))) f = unix`MAP_PRIVATE;
		if(!isnil(strstr(mode,"s"))) f = unix`MAP_SHARED;

		if(!isnil(strstr(mode,"r"))) m |= unix`PROT_READ;
		if(!isnil(strstr(mode,"w"))) m |= unix`PROT_WRITE;
	} else {
		m = unix`PROT_READ | unix`PROT_WRITE;
	}

	if( (f == unix`MAP_SHARED) && (m & unix`PROT_WRITE) )
		if ( (m & unix`PROT_READ) || (m & unix`PROT_EXEC) )
			fm = unix`O_RDWR;
		else
			fm = unix`O_WRONLY;
	else if ( (m & unix`PROT_READ) || (m & unix`PROT_EXEC) )
		fm = unix`O_RDONLY;
	else
		// a non-readable, non-executable, private mapping? why?
		fm = unix`O_RDONLY;
	
	fd=sys_open(filename,fm);
	if(0 > fd) {
		error("cannot open %s",filename);
	}

	st = (struct unix`stat *)malloc(sizeof(struct unix`stat));
	if(!st) {
		sys_close(fd);
		error("couldn't allocate stat buf");
	}

	if(0 > sys_fstat(fd,st)) {
		sys_close(fd);
		error("couldn't stat %s",filename);
	} 

	if(S_ISBLK(st)) {
		@local sb,r;

		sb=(uint64 *)malloc(8);
		if(!sb) {
			sys_close(fd);
			error("malloc failure");
		}
		*sb=0;
		if(looksym(unix,'BLKGETSIZE)) {
			r=sys_ioctl(fd, unix`BLKGETSIZE, sb);
			if(r) {
				sys_close(fd);
				error("couldn't determine size of block device %s", filename);
			}
		} else if(looksym(unix,'DKIOCGETBLOCKCOUNT)) {
			r=sys_ioctl(fd, unix`DKIOCGETBLOCKCOUNT, sb);
			if(r) {
				sys_close(fd);
				error("couldn't determine size of block device %s", filename);
			}
		}
		s=*sb * 512;
	} else {
		s = st->st_size;
	}

	if (s == 0)
	{
		//empty file, length zero mapping
		sys_close(fd);
		return [ 0, 0];
	}

	p = sys_mmap(0, s, m, f, fd, 0);
	if(p == -1) {
		// we can try with noreserve on a platform that supports it
		if(looksym(unix,'MAP_NORESERVE)) {
			p = sys_mmap(0, s, m, unix`MAP_NORESERVE|f, fd, 0); 
		}
	}

	sys_close(fd);
	if(p == -1) {
		error("could not map %s",filename);
	}

	return [p, s];
}

@global iohash;

iohash=[:];

@define open(filename, mode) {
	@local flags,oflags,fd,newmode,nfd;

	if(!isstring(filename)) 	error("open: filename is not a string");
	if(!isstring(mode)) 		error("open: mode is not a string");
	if(1 > strlen(mode)) 		error("open: mode cannot be empty");

	flags = 0;
	oflags = 0;

	if(!isnil(strstr(mode,"r")))
		flags |= 1;
	if((!isnil(strstr(mode,"w"))) || (!isnil(strstr(mode,"a"))))
		flags |= 2;
	if(!isnil(strstr(mode,"w")))
		oflags |= unix`O_CREAT|unix`O_TRUNC;
	if((flags&1) && (flags&2))
		oflags |= unix`O_RDWR;
	else if(flags&1)
		oflags |= unix`O_RDONLY;
	else if(flags&2)                                                   
		oflags |= unix`O_WRONLY;                 

	fd=sys_open(filename,oflags,0777);
	if(0 > fd) {
		return nil;
	} 

	if((flags&1) && (flags&2)) {
		newmode="rw";
	} else if(flags&1) {
		newmode="r";
	} else if(flags&2) {
		newmode="w";
	} else {
		error("invalid mode");
	}

	nfd=fdopen(fd,newmode);

	if(isnil(nfd))
		return nil;
	{
		@local k;

		k=weakcons(nfd,nil);
		iohash[k]=fd;

		finalize(nfd,@lambda(args ...) {
			tabdelete(iohash,k);
			sys_close(fd);
		});

		return nfd;
	}

}

@define seek(fd,pos,whence) {
	@local sfd,r;

	sfd=iohash[cons(fd,nil)];
	if(!isnil(sfd)) {
		r=sys_lseek(sfd,pos,whence); 
	} else {
		error("seek: seeking a cinquecento fd with no unix fd");
	}

	return r;
}

@define close(fd) {
	@local sfd;

	sfd=iohash[cons(fd,nil)];
	if(!isnil(sfd)) {
		sys_close(sfd); 
	} else {
		error("close: closing a cinquecento fd with no unix fd");
	}
}

unlink = sys_unlink;

/* LINUX_REBOOT_CMD_RESTART RB_AUTOBOOT 0x1234567 */
/* LINUX_REBOOT_CMD_HALT RB_HALT_SYSTEM 0xcdef0123 */
/* LINUX_REBOOT_CMD_POWER_OFF 0x4321fedc */
/* LINUX_REBOOT_CMD_RESTART2 0xa1b2c3d4 */
/* LINUX_REBOOT_CMD_CAD_ON RB_ENABLE_CAD 0x89abcdef */
/* LINUX_REBOOT_CMD_CAD_OFF RB_DISABLE_CAD, 0 */
@define reboot(cmd) {
	return sys_reboot(0xfee1dead,672274793,cmd,0);
}

@global dirlist;
@global _readdir;
if(looksym(unix,'getdents)) {
@define dirlist(dirname) {
	@local readdir_size;
	@local buf;
	@local fd;
	@local ddom;
	@local count;
	@local l;
	@local start,end;
	
	readdir_size=512;

	buf=malloc(readdir_size);
	if(!buf) return nil;

	fd=sys_open(dirname,unix`O_RDONLY);
	if(fd==-1)
		return nil;

	ddom=mkdom(unix,asof(buf));
	buf={ddom}buf;

	l=[];

	while((count=(int)syscall(unix`getdents,fd,buf,readdir_size)) > 0) {

		start=buf;
		end=((unsigned char *)buf)+count;
		while(start<end) {
			start=(struct linux_dirent *)start;
			append(l,getbytes(start->d_name,strlen(start->d_name)));
			start=(struct linux_dirent *)(((unsigned char *)start)
				+ start->d_reclen);
		}	
	}

	return l;
}

@define _readdir(dirname) {
	@local s,l,p,d,x;

	l=dirlist(dirname);
	s=mkstr(length(l) * sizeof(struct unix`dirent));

	d=mkdom(unix,mksas(s));
	p=(struct dirent *){d}0;
	for(x=0;x<length(l);x++) {
		putbytes(p->d_name,l[x]);
		p++;	
	}
	
	return asof(d);
}
}

@global mk_connected_tcp_socket;
@global mk_connected_udp_socket;
@global bind_inet_socket;
@global __tcpopen;
if(looksym(unix,'AF_INET)) {
@define mk_connected_tcp_socket(ip,port) {
	@local s,sa,r,d;

	s=sys_socket(unix`AF_INET,unix`SOCK_STREAM,0);
	if(s==-1) return nil;

	sa=(struct unix`sockaddr_in *)malloc(sizeof(struct unix`sockaddr_in));

	if(lookfield(@typeof(*sa),'length)) {
		sa->length=sizeof(*sa);
	}
	sa->sin_family=unix`AF_INET;

	d=domof(sa);

	if(baserep(@typeof(d`unsigned int))==cqct`Ru32le) {
		sa->sin_port=wswap(port); 
		sa->sin_addr.s_addr=dswap(ip);
	} else {
		sa->sin_port=port; 
		sa->sin_addr.s_addr=ip;
	}

	r=sys_connect(s,sa,sizeof(*sa));
	if(r) {
		sys_close(s);
		return nil;
	}

	return s;
}

@define __tcpopen(addr) { // don't promote to _tcpopen until DNS works
	@local host,port,arr;
	
	if(!isstring(addr))
		error("addr must be a string");

	arr=split(addr,":");
	if(length(arr) != 2)
		error("addr must be a string of the form ip:port");

	host=inet_aton(arr[0]);
	if(isnil(host))
		error("%a is not an ip address",arr[0]);

	port=strton(arr[1]);
	if(isnil(port))
		error("%a is not a port",arr[1]);

	return mk_connected_tcp_socket(host,port);
}

@define mk_connected_udp_socket(ip,port) {
	@local s,sa,r,d;

	s=sys_socket(unix`AF_INET,unix`SOCK_DGRAM,0);
	if(s==-1) return nil;

	sa=(struct unix`sockaddr_in *)malloc(sizeof(struct unix`sockaddr_in));

	if(lookfield(@typeof(*sa),'length)) {
		sa->length=sizeof(*sa);
	}

	sa->sin_family=unix`AF_INET;

	d=domof(sa);

	if(baserep(@typeof(d`unsigned int))==cqct`Ru32le) {
		sa->sin_port=wswap(port); 
		sa->sin_addr.s_addr=dswap(ip);
	} else {
		sa->sin_port=port; 
		sa->sin_addr.s_addr=ip;
	}

	r=sys_connect(s,sa,sizeof(*sa));
	if(r) { sys_close(s); return nil; }

	return s;
}

@define bind_inet_socket(s,ip,port) {
	@local sa,r,d;

	sa=(struct unix`sockaddr_in *)malloc(sizeof(struct unix`sockaddr_in));

	if(lookfield(@typeof(*sa),'length)) {
		sa->length=sizeof(*sa);
	}
	sa->sin_family=unix`AF_INET;

	d=domof(sa);
	if(baserep(@typeof(d`unsigned int))==cqct`Ru32le) {
		sa->sin_port=wswap(port); 
		sa->sin_addr.s_addr=dswap(ip);
	} else {
		sa->sin_port=port; 
		sa->sin_addr.s_addr=ip;
	}

	r=sys_bind(s,sa,sizeof(*sa));

	return r;
}

}

@global mk_connected_unix_socket;
@global bind_unix_socket;
@global _unixopen;
if(looksym(unix,'AF_UNIX)) {
@define mk_connected_unix_socket(pathname) {
	@local s,sa,r;

	s=sys_socket(unix`AF_UNIX,unix`SOCK_STREAM,0);
	if(s==-1) return nil;

	sa=(struct unix`sockaddr_un *)malloc(sizeof(struct unix`sockaddr_un));

	if(lookfield(@typeof(*sa),'length)) {
		sa->length=sizeof(*sa);
	}
	sa->sun_family=unix`AF_UNIX;
	putbytes(&sa->sun_path,pathname);

	r=sys_connect(s,sa,sizeof(*sa));
	if(r) { sys_close(s); return nil; }

	return s;
}

@define _unixopen(pathname) {
	
	if(!isstring(pathname))
		error("pathname must be a string");

	return mk_connected_unix_socket(pathname);
}

@define bind_unix_socket(s,pathname) {
	@local sa,r;

	sa=(struct unix`sockaddr_un *)malloc(sizeof(struct unix`sockaddr_un));

	if(lookfield(@typeof(*sa),'length)) {
		sa->length=sizeof(*sa);
	}
	sa->sun_family=unix`AF_UNIX;
	putbytes(&sa->sun_path,pathname);

	r=sys_bind(s,sa,sizeof(*sa));

	return r;
}
}

@global _socket;
if(looksym(unix,'socket)) {
@define _socket(d,t,p) {
	return sys_socket(d,t,p);
}
}
