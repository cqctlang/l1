
@global unix;
@global linuxns;

{
  @local u,r,a,o,w;

  u=uname();
  o=u[0];
  a=u[3];

  r=myrootns();
  w=sizeof(r`long);

  switch([o,a,w]) {
    case ["Linux","x86_64",8]:
      eval("@include <linux-x86_64.cqct>"); 
      break;
    case ["Darwin","x86_64",8]:
      eval("@include <darwin-x86_64.cqct>"); 
      break;
    case ["Linux","x86_64",4]:
    case ["Darwin","x86_64",4]:
    default:
      // no direct syscalls for you
      printf("Unsupported OS: %a\n",[o,a,w]);
  }

};

sys_open = @lambda(filename,oflag,rest ...) {
  @local m,r;

  m=malloc(length(filename)+1);
  putbytes(m,filename);
  m[length(filename)]=0;

  if(oflag & unix`O_CREAT) {
    r=syscall(linuxns`open,m,oflag,rest[0]);
  } else {
    r=syscall(linuxns`open,m,oflag);
  }
  return r;
};

sys_close = @lambda(fd) {
  syscall(linuxns`close,fd);
};

sys_read = @lambda(fd,buf,len) {
  @local m,r,c;

  m=malloc(len);
  r=syscall(linuxns`read,fd,m,len);
  if(r>0) {
    c=getbytes(m,r);
    putbytes(buf,c);
  }
  return r;
};

sys_write = @lambda(fd,buf,len) {
  @local m,r;

  m=malloc(len);

  if(isstring(buf)) {
    if(length(buf) > len) {
      putbytes(m,substr(buf,0,len));
    } else {
      putbytes(m,buf);
    }
  } else {
    memcpy(m,buf,len);
  }

  r=syscall(linuxns`write,fd,m,len);
  return r;
};

sys_ioctl = @lambda(fd,req,data) {
  @local r;

  r=syscall(linuxns`ioctl,fd,req,data);

  return r;

};

sys_unlink = @lambda(filename) {
  @local m;

  m=malloc(length(filename)+1);
  putbytes(m,filename);
  m[length(filename)]=0;

  return syscall(linuxns`unlink,m);
};

@global sys_mmap;
if(linuxns.looksym('mmap2)) {
  sys_mmap = @lambda(addr,length,prot,flags,fd,offset) {                                
    return (linuxns`void *)syscall(linuxns`mmap2,addr,length,prot,flags,fd,offset>>12);                
  };
} else {
  sys_mmap = @lambda(addr,length,prot,flags,fd,offset) {                                
    return (linuxns`void *)syscall(linuxns`mmap,addr,length,prot,flags,fd,offset);                
  };

}

sys_msync=@lambda(addr,size,flags) {

  return syscall(linuxns`msync,addr,size,flags);

};

sys_socket = @lambda(domain,type,protocol) {

  return syscall(linuxns`socket,domain,type,protocol);

};

sys_connect = @lambda(fd,sockaddr,size) {
  @local sa;

  if(isnil(size)) {
    size=sizeof(*sockaddr);
  }
  sa=malloc(size);
  if(!sa) return nil;

  putbytes(sa,getbytes(sockaddr,size));

  return syscall(linuxns`connect,fd,sa,size);
};

sys_bind = @lambda(fd,sockaddr,size) {
  @local sa;

  if(isnil(size)) {
    size=sizeof(*sockaddr);
  }
  sa=malloc(size);
  if(!sa) return nil;

  putbytes(sa,getbytes(sockaddr,size));

  return syscall(linuxns`bind,fd,sa,size);
};

sys_listen = @lambda(fd,backlog) {

  return syscall(linuxns`listen,fd,backlog);
};

sys_accept = @lambda(fd,sockaddr,size) {
  @local sa,ss;

  if(isnil(size)) {
    size=sizeof(*sockaddr);
  } else {
    size=*size;
  }
  sa=malloc(size);
  if(!sa) return nil;

  putbytes(sa,getbytes(sockaddr,size));

  ss=malloc(sizeof(linuxns`int));
  if(!ss) return nil;

  ss=(linuxns`int *)ss;

  *ss=size;

  return syscall(linuxns`accept,fd,sa,ss);

};
