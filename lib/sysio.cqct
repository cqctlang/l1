/* native syscall replacements for system functions in l1 */
@include <sys.cqct>

// bindings needed for io.cqct
// _open,_popen,_sockpair,_socket,_tcpopen,_unixopen,_recvfd,_tcpaccept,_ioctl,_close

@define _ioctl(fd,req,bufp) {
	sys_ioctl(fd,req,bufp);
}

@define _munmap(addr, len) {
	sys_munmap(addr ,len);

	return nil;
}

@define _mapfd(fd, prot) {
	@local st,p,s,m,f,fdno;

	if(!isfd(fd))
		error("fd is not a file descriptor");
	if(!issysfd(fd))
		error("fd cannot be memory mapped");
	if(!isstring(prot))
		error("prot is not a string");

	fdno=sysfdno(fd);

	m = 0;
	f = 0;

	if(!isnil(strstr(prot,"p"))) f = unix`MAP_PRIVATE;
	if(!isnil(strstr(prot,"s"))) f = unix`MAP_SHARED;

	if(!isnil(strstr(prot,"r"))) m |= unix`PROT_READ;
	if(!isnil(strstr(prot,"w"))) m |= unix`PROT_WRITE;
	if(!isnil(strstr(prot,"x"))) m |= unix`PROT_EXEC;

	st = (struct unix`stat *)malloc(sizeof(struct unix`stat));
	if(!st) {
		error("couldn't allocate stat buf");
	}

	if(0 > sys_fstat(fdno, st)) {
		error("couldn't stat fd %a", fd);
	} 

	if(S_ISBLK(st)) {
		@local sb,r;

		sb=(uint64 *)malloc(8);
		if(!sb) {
			error("malloc failure");
		}
		*sb=0;
		if(looksym(unix,'BLKGETSIZE)) {
			r=sys_ioctl(fdno, unix`BLKGETSIZE, sb);
			if(r) {
				error("couldn't determine size of block device behind %a", fd);
			}
		} else if(looksym(unix,'DKIOCGETBLOCKCOUNT)) {
			r=sys_ioctl(fd, unix`DKIOCGETBLOCKCOUNT, sb);
			if(r) {
				error("couldn't determine size of block device behind %a", fd);
			}
		}
		s=*sb * 512;
	} else {
		s = st->st_size;
	}

	if (s == 0)
	{
		//empty file, length zero mapping
		return [ 0, 0];
	}

	p = sys_mmap(0, s, m, f, fdno, 0);
	if(p == -1) {
		// we can try with noreserve on a platform that supports it
		if(looksym(unix,'MAP_NORESERVE)) {
			p = sys_mmap(0, s, m, unix`MAP_NORESERVE|f, fdno, 0); 
		}
	}

	if(p == -1) {
		error("could not map fd %a",fd);
	}

	return [p, s];
}

@define _open(file, mode, perm) {
	@local flags, oflags, fd;

	if(!isstring(file)) 	error("open: filename is not a string");
	if(!isstring(mode)) 	error("open: mode is not a string");
	if(1 > strlen(mode)) 	error("open: mode cannot be empty");
	if(!iscvalue(perm))	error("open: perm must be a cvalue");

	flags = 0;
	oflags = 0;

	if(!isnil(strstr(mode, "r"))) {
		flags |= 1;
		if(!isnil(strstr(mode, "+")))
			flags |= 2;
	}
	if((!isnil(strstr(mode, "w"))) || (!isnil(strstr(mode, "a"))))
		flags |= 2;
	if(!isnil(strstr(mode, "w"))) {
		oflags |= unix`O_CREAT|unix`O_TRUNC;
		if(!isnil(strstr(mode, "+")))
			flags |= 1;		
	}
	if((flags &1 ) && (flags & 2))
		oflags |= unix`O_RDWR;
	else if(flags & 1)
		oflags |= unix`O_RDONLY;
	else if(flags & 2)                                                   
		oflags |= unix`O_WRONLY;                 

	fd=sys_open(file, oflags, perm);
	if(0 > fd) {
		return nil;
	} 

	return fd;
}

unlink = sys_unlink;

/*
@define seek(fd,pos,whence) {
	@local sfd,r;

	sfd=iohash[cons(fd,nil)];
	if(!isnil(sfd)) {
		r=sys_lseek(sfd,pos,whence); 
	} else {
		error("seek: seeking a cinquecento fd with no unix fd");
	}

	return r;
}
*/

@global _socket;
if(looksym(unix,'socket)) {
	@define _socket(d,t,p) {
		@local rv;

		rv=sys_socket(d,t,p);
		if(rv == -1) {
			error("FOOsocket: %s", errno()[1]);
		}
		
		return rv;
	}
}
