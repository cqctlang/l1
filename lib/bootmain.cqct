/* bootmain.cqct -- bootstrap compiler and evaluator
   this file expects to be included by boot.cqct.
*/

@global
	args,
	debug,
	eval,
	expand,
	l1path,
	load,
	compile,
	callfn,
	repl,
	$repllevel,
	$l1start,
	dumpk,
	printstack
	;

@defloc topwrap(e)
{
	return #lambda(#[], #ret(#g(#id('$$), #block(#[], e))), stxsrc(e));
}

@defloc mkcompiler(passes)
{
	@local npass;
	npass = length(passes);
	@define compile(e)
	{
		@local err;
		e = topwrap(e);
		callcc(@lambda(done){
				@defloc myerr(msg)
				{
					printf("%s\n", msg);
					done(nil);
				}
				dynamicwind(@lambda(){
						err = errorhandler;
						errorhandler = myerr;
					    },
					    @lambda(){
						    @local i;
						    for(i = 0; i < npass; i++)
							    e = passes[i](e);
						    return e;
					    },
					    @lambda(){
						    errorhandler = err;
					    });
			});
	}
}

mkcompiler(bootcompilerpasses());

@defloc _eval(str, whence, line)
{
	@local fn, in;
	in = parse(str, whence, line);
	if(in == nil)
		return nil;
	fn = compile(in);
	if(fn == nil)
		return nil;
	fn();
}

@define eval(str)
{
	_eval(str, "<eval-input>", 1);
}

@defloc findfileinpath(file, path)
{
	@local try;
	while(!isempty(path)){
		try = pop(path)+"/"+file;
		if(access(try, "r"))
			return try;
	}
	return nil;
}

@define load(file)
{
	@local path, str;
	if(file[0] == '/')
		path = file;
	else if(file[0] == '.')
		path = file;
	else
		path = findfileinpath(file, loadpath());
	if(path == nil)
		error("cannot find %s in load path", file);
	str = mapfile(path);
	_eval(str, file, 1);
}

load("expand.cqct");
mkcompiler(push(bootcompilerpasses(), expand));
load("prelude.cqct");

@define callfn(fn, args ...)
{
	callcc(@lambda(ret){
			currentreset = ret;
			return apply(fn, args);
    	       }); 
}

@defloc replerror(msg)
{
	callcc(@lambda(errk){
			printf("error: %s\n", msg);
			printstack(stdout, continuationstack(errk));
			currentreset(nil);
		});
}

@defloc replinterrupt()
{
	callcc(@lambda(k){
		printf("\ninterrupted\n");
		$debug(k);
	});
}

@defloc batcherror(msg)
{
	callcc(@lambda(errk){
			printf("error: %s\n", msg);
			printstack(stdout, continuationstack(errk));
			currentreturn(nil);
		});
}

@defloc batchinterrupt()
{
	callcc(@lambda(k){
		printf("\ninterrupted\n");
		kbacktrace(continuationstack(k));
		exit(1);
	});
}

@defloc $debug(k)
{
	@local stk, fs;

	@defloc help()
	{
		printf("l1 debugger commands\n");
		printf("\thelp, h, ?              display this help\n");
		printf("\tbt                      display current backtrace\n");
		printf("\tl, locals <n>           display variables in frame <n>\n");
		printf("\tr, reset                reset repl\n");
		printf("\tnew                     start new repl\n");
		printf("\tEOF, exit, quit, q      resume execution\n");
		printf("\ta, abort                abort l1\n");
	}

	@defloc dumplex(fno)
	{
		@local cl, code, live, lex, lidx, off, src;

		@defloc loop(lidx)
		{
			@local rib, rlex;
			if(lidx == nil)
				return;
			rib = lex[lidx];
			rlex = rib[0];
			rib = slice(rib, 1, length(rib));
			foreach(@lambda(d){
					@local id, kind, idx, box;
					[id, kind, idx, box] = d;
					if(kind == 'free)
						printf("\t%5s   %10s   %a\n",
						       kind, id, box ? unbox(clref(cl, idx)) : clref(cl, idx));
					else
						printf("\t%5s   %10s   %a\n",
						       kind, id, box ? unbox(live[idx]) : live[idx]);
				}, rib);
			loop(rlex);
		}

		[cl, off, lidx] = fs[fno];
		live = liveinframe(stk, fno);
		code = clcode(cl);
		lex = codelex(code);
		if(lex == nil){
			printf("no lexical information for frame #%d (%s)\n", fno, codename(code));
			return;
		}
		printf("variables in frame #%d in %s", fno, codename(code));
		src = codesrc(code, off);
		if(src == nil)
			printf("\n");
		else if(src[1] == nil)
			printf(" (%s)\n", src[0]);
		else
			printf(" (%s:%d)\n", src[0], src[1]);
		loop(lidx);
	}

	@defloc debugloop()
	{
		@local s, tok, fr;
		printf("debug> ");
		s = read(stdin, 1024);
		if(s == nil){
			printf("\n");
			return;
		}
		if(s == "")
			return debugloop();
		tok = split(s);
		if(length(tok) < 1)
			return debugloop();
		switch(tok[0]){
		case "h":
		case "?":
		case "help":
			help();
			break;
		case "l":
		case "loc":
		case "locals":
			if(length(tok) == 1)
				fr = 0;
			else if(length(tok) == 2){
				fr = strton(tok[1]);
				if(fr == nil){
					printf("error: \"locals\" requires a frame number\n");
					break;
				}
			}else{
				printf("error: wrong number of arguments to \"locals\"\n");
				break;
			}
			dumplex(fr);
			break;
		case "bt":
			printstack(stdout, continuationstack(k));
			break;
		case "r":
		case "reset":
			currentreset(nil);
			break;
		case "new":
			repl();
			break;
		case "q":
		case "exit":
		case "quit":
			return;
		case "a":
		case "abort":
			currentabort();
		        break;
		default:
			printf("unrecognized command\n");
			break;
		}
		debugloop();
	}

	stk = continuationstack(k);
	fs = stackframes(stk);
	debugloop();
}

@define debug()
{
	callcc($debug);
}

@define printstack(fd, stack)
{
//	@local cnt;
	@defloc printframe(f)
	{
		@local cl, off, code, id, s, src;
//		@local cur;
		[cl, off, _] = f;
//		cur = cnt++;
		code = clcode(cl);
		id = codename(code);
		s = cid2str(id);
		if(s[0] == '$')
			/* elide system functions */
			return;
		switch(codekind(code)){
		case 'builtin:
//			fprintf(fd, "#%-4d %20s\t(builtin function)\n", cur, id);
			fprintf(fd, "%20s\t(builtin function)\n", id);
			break;
		case 'native:
//			fprintf(fd, "#%-4d %20s\t(native function)\n", cur, id);
			fprintf(fd, "%20s\t(native function)\n", id);
			break;
		case 'alien:
//			fprintf(fd, "#%-4d %20s\t(alien function)\n", cur, id);
			fprintf(fd, "%20s\t(alien function)\n", id);
			break;
		case 'byte:
			src = codesrc(code, off);
//			fprintf(fd, "#%-4d %20s", cur, id);
			fprintf(fd, "%20s", id);
			if(src == nil)
				fprintf(fd, "\n");
			else if(src[1] == nil)
				fprintf(fd, "\t(%s)\n", src[0]);
			else
				fprintf(fd, "\t(%s:%d)\n", src[0], src[1]);
			break;
		}
	}
//	cnt = 0;
	foreach(printframe, stackframes(stack));
}

@define dumpk(k)
{
	printstack(stdout, continuationstack(k));
}

$repllevel = 0;
@define repl()
{
	@local prompt, level;

	@defloc mkprompt()
	{
		@local i;
		prompt = "";
		for(i = 0; i < level; i++)
			prompt += ";";
	}

	@defloc $loop()
	{
		@local s, v;
		printf("%s ", prompt);
		s = read(stdin, 1024);
		if(s == nil){
			$repllevel--;
			printf("\n");
			currentreturn(nil);
			error("unexpected return from return\n");
		}
		v = _eval(s, "(stdin)", 1);
		if(v != nil)
			printf("%a\n", v);
		$loop();
	}

	level = ++$repllevel;
	mkprompt();
	callcc(@lambda(done){
			@local oldret, olderr, oldint, oldreset, thisreset;
			dynamicwind(
				@lambda(){
					oldret = currentreturn;
					olderr = errorhandler;
					oldint = interrupthandler;
					oldreset = currentreset;
					$repllevel = level;
					currentreturn = done;
					errorhandler = replerror;
					interrupthandler = replinterrupt;
					currentreset = thisreset;
				},
				@lambda(){ 
					callcc(@lambda(reset){
							currentreset = thisreset = reset;
						});
					$loop();
				},
				@lambda(){
					currentreturn = oldret;
					errorhandler = olderr;
					interrupthandler = oldint;
					currentreset = oldreset;
				});
	       });
}

@defloc parseargs(args)
{
	@local arg;
	@local forms, cmd, entry;

	l1path = pop(args);
	forms = [];
	cmd = [];
	entry = nil;
	while(length(args)){
		arg = pop(args);
		if(arg == "--")
			break;
		if(arg[0] != '-'){
			push(args, arg); /* command file */
			break;
		}
		if(arg == "-x"){
			if(length(args) == 0)
				error("missing form for -x");
			append(forms, pop(args));
			continue;
		}
		if(arg == "-e"){
			if(length(args) == 0)
				error("missing symbol for -e");
			if(entry)
				error("multiple uses of -e");
			entry = mkcid(pop(args));
			continue;
		}
		/* else eat option */
	}
	cmd = args;
	if(entry && length(cmd) == 0)
		error("entry specified without a script");
	return [forms, entry, cmd];
}

@define $l1start(arg ...)
{
	@local forms, entry, cmd, file, rv;
	callcc(@lambda(root){
			return @lambda(){
				[forms, entry, cmd] = parseargs(arg);
				if(length(cmd) == 0 && length(forms) == 0)
					return repl();
				callcc(@lambda(done){
						currentreturn = done;
						errorhandler = batcherror;
						interrupthandler = batchinterrupt;
						while(length(forms)){
							@local form;
							form = pop(forms);
							rv = eval(form);
						}
						if(length(cmd) == 0)
							return rv;
						file = cmd[0];
						if(entry == nil){
							args = cmd;
							return load(file);
						}else{
							@local f;
							load(file);
							f = toplevel[entry];
							if(f == nil)
								error("entry %a is undefined",
								      entry);
							if(!isprocedure(f))
								error("entry %a is not a function",
								      entry);
							return apply(f, cmd);
						}
					});
			};})();
}
