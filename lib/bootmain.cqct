/* bootmain.cqct -- bootstrap compiler and evaluator
   this file expects to be included by boot.cqct.
*/

@global
	eval,
	expand,
	load,
	compile,
	callfn,
	repl,
	$l1start
	;

@defloc topwrap(e)
{
	return #lambda(#[], #ret(#g(#id('$$), #block(#[], e))), stxsrc(e));
}

@defloc mkcompiler(passes)
{
	@local npass;
	npass = length(passes);
	@define compile(e)
	{
		@local err;
		e = topwrap(e);
		callcc(@lambda(done){
				@defloc myerr(msg)
				{
					printf("%s\n", msg);
					done(nil);
				}
				dynamicwind(@lambda(){
						err = defaulterror;
						defaulterror = myerr;
					    },
					    @lambda(){
						    @local i;
						    for(i = 0; i < npass; i++)
							    e = passes[i](e);
						    return e;
					    },
					    @lambda(){
						    defaulterror = err;
					    });
			});
	}
}

mkcompiler(bootcompilerpasses());

@defloc _eval(str, whence, line)
{
	@local fn, in;
	in = parse(str, whence, line);
	if(in == nil)
		return nil;
	fn = compile(in);
	if(fn == nil)
		return nil;
	fn();
}

@define eval(str)
{
	_eval(str, "<eval-input>", 1);
}

@defloc findfileinpath(file, path)
{
	@local try;
	while(!isempty(path)){
		try = pop(path)+"/"+file;
		if(access(try, "r"))
			return try;
	}
	return nil;
}

@define load(file)
{
	@local path, str;
	if(file[0] == '/')
		path = file;
	else if(file[0] == '.')
		path = file;
	else
		path = findfileinpath(file, loadpath());
	if(path == nil)
		error("cannot find %s in load path", file);
	str = mapfile(path);
	_eval(str, file, 1);
}

load("expand.cqct");
mkcompiler(push(bootcompilerpasses(), expand));
load("prelude.cqct");

@define callfn(fn, args ...)
{
	callcc(@lambda(ret){
			defaultreset = ret;
			return apply(fn, args);
    	       }); 
}

@defloc replerror(msg)
{
	callcc(@lambda(errk){
			printf("error: %s\n", msg);
			kbacktrace(continuationfr(errk));
			defaultreset(nil);
		});
}

@defloc loaderror(msg)
{
	callcc(@lambda(errk){
			printf("error: %s\n", msg);
			kbacktrace(continuationfr(errk));
			exit(1);
		});
}

@define repl()
{
	@defloc $loop()
	{
		@local s, v;
		printf("; ");
		s = read(stdin, 1024);
		if(s == nil){
			printf("\n");
			defaultreturn(nil);
		}
		v = _eval(s, "(stdin)", 1);
		if(v != nil)
			printf("%a\n", v);
		$loop();
	}

	callcc(@lambda(done){
			defaultreturn = done;
			defaulterror = replerror;
			callcc(@lambda(reset){
					defaultreset = reset;
			       });
			$loop(); 
	       });
}

@define $l1start(arg ...)
{
	if(length(arg) == 0)
		repl();
	else{
		callcc(@lambda(done){
				defaultreturn = done;
				defaulterror = loaderror;
				load(arg[0]);
		       });
	}
}
