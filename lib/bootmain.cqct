/* bootmain.cqct -- bootstrap compiler and evaluator
   this file expects to be included by boot.cqct.
*/

@global
	args,
	eval,
	expand,
	l1path,
	load,
	compile,
	callfn,
	repl,
	$l1start,
	dumpk,
	withnullcont
	;

@defloc topwrap(e)
{
	return #lambda(#[], #ret(#g(#id('$$), #block(#[], e))), stxsrc(e));
}

@defloc mkcompiler(passes)
{
	@local npass;
	npass = length(passes);
	@define compile(e)
	{
		@local err;
		e = topwrap(e);
		callcc(@lambda(done){
				@defloc myerr(msg)
				{
					printf("%s\n", msg);
					done(nil);
				}
				dynamicwind(@lambda(){
						err = defaulterror;
						defaulterror = myerr;
					    },
					    @lambda(){
						    @local i;
						    for(i = 0; i < npass; i++)
							    e = passes[i](e);
						    return e;
					    },
					    @lambda(){
						    defaulterror = err;
					    });
			});
	}
}

mkcompiler(bootcompilerpasses());

@defloc _eval(str, whence, line)
{
	@local fn, in;
	in = parse(str, whence, line);
	if(in == nil)
		return nil;
	fn = compile(in);
	if(fn == nil)
		return nil;
	fn();
}

@define eval(str)
{
	_eval(str, "<eval-input>", 1);
}

@defloc findfileinpath(file, path)
{
	@local try;
	while(!isempty(path)){
		try = pop(path)+"/"+file;
		if(access(try, "r"))
			return try;
	}
	return nil;
}

@define load(file)
{
	@local path, str;
	if(file[0] == '/')
		path = file;
	else if(file[0] == '.')
		path = file;
	else
		path = findfileinpath(file, loadpath());
	if(path == nil)
		error("cannot find %s in load path", file);
	str = mapfile(path);
	_eval(str, file, 1);
}

load("expand.cqct");
mkcompiler(push(bootcompilerpasses(), expand));
load("prelude.cqct");

@define callfn(fn, args ...)
{
	callcc(@lambda(ret){
			defaultreset = ret;
			return apply(fn, args);
    	       }); 
}

@defloc replerror(msg)
{
	callcc(@lambda(errk){
			printf("error: %s\n", msg);
			kbacktrace(continuationfr(errk));
			defaultreset(nil);
		});
}

@defloc replinterrupt()
{
	callcc(@lambda(k){
		printf("\ninterrupted\n");
		debug(k);
	});
}

@defloc batcherror(msg)
{
	callcc(@lambda(errk){
			printf("error: %s\n", msg);
			kbacktrace(continuationfr(errk));
			exit(1);
		});
}

@defloc batchinterrupt()
{
	callcc(@lambda(k){
		printf("\ninterrupted\n");
		kbacktrace(continuationfr(k));
	});
}

@defloc debug(k)
{
	@defloc help()
	{
		printf("l1 debugger commands\n");
		printf("help, h, ?         display this help\n");
		printf("bt                 display current backtrace\n");
		printf("r, reset           reset repl\n");
		printf("new                start new repl\n");
		printf("EOF, exit, quit, q resume execution\n");
		printf("a, abort           abort l1\n");
	}

	@defloc debugloop()
	{
		@local s, tok;
		printf("debug> ");
		s = read(stdin, 1024);
		if(s == nil){
			printf("\n");
			return;
		}
		if(s == "")
			debugloop();
		tok = split(s);
		switch(tok[0]){
		case "h":
		case "?":
		case "help":
			help();
			break;
		case "bt":
			kbacktrace(continuationfr(k));
			break;
		case "r":
		case "reset":
			defaultreset(nil);
			break;
		case "new":
			repl();
			break;
		case "q":
		case "exit":
		case "quit":
			return;
		case "a":
		case "abort":
			/* FIXME: call abort handler */
			exit(1);
		        break;
		default:
			printf("unrecognized command\n");
			break;
		}
		debugloop();
	}
	debugloop();
}

@define dumpk(k)
{
	kbacktrace(continuationfr(k));
}

@define repl()
{
	@defloc $loop()
	{
		@local s, v;
		printf("; ");
		s = read(stdin, 1024);
		if(s == nil){
			printf("\n");
			defaultreturn(nil);
			error("unexpected return from return\n");
		}
		v = _eval(s, "(stdin)", 1);
		if(v != nil)
			printf("%a\n", v);
		$loop();
	}

	callcc(@lambda(done){
			@local oldret, olderr, oldint, oldreset, thisreset;
			withnullcont(@lambda(){
					dynamicwind(
						@lambda(){
							oldret = defaultreturn;
							olderr = defaulterror;
							oldint = defaultinterrupt;
							oldreset = defaultreset;
							defaultreturn = done;
							defaulterror = replerror;
							defaultinterrupt = replinterrupt;
							defaultreset = thisreset;
						},
						@lambda(){ 
							callcc(@lambda(reset){
									defaultreset = thisreset = reset;
								});
							$loop();
						},
						@lambda(){
							defaultreturn = oldret;
							defaulterror = olderr;
							defaultinterrupt = oldint;
							defaultreset = oldreset;
						});
				});
	       });
}

@defloc parseargs(args)
{
	@local arg;
	@local forms, cmd;

	l1path = pop(args);
	forms = [];
	cmd = [];
	while(length(args)){
		arg = pop(args);
		if(arg == "-x"){
			if(length(args) == 0)
				error("missing form for -x");
			append(forms, pop(args));
			continue;
		}
		if(arg[0] == '-')
			continue;
		append(cmd, arg);
	}
	return [forms, cmd];
}

@define $l1start(arg ...)
{
	@local forms, cmd, file, rv;
	callcc(@lambda(root){
			withnullcont = root;
			return @lambda(){
				[forms, cmd] = parseargs(arg);
				if(length(cmd) == 0 && length(forms) == 0)
					return repl();
				callcc(@lambda(done){
						defaultreturn = done;
						defaulterror = batcherror;
						defaultinterrupt = batchinterrupt;
						while(length(forms)){
							@local form;
							form = pop(forms);
							rv = eval(form);
						}
						if(length(cmd) == 0)
							return rv;
						file = pop(cmd);
						args = cmd;
						return load(file);
					});
			};})();
}
