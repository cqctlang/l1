@define typenameequal(t1, t2){
	@local i, j, flds1, flds2, ps1, ps2, p1, p2,
               f1, f2, c1, c2, tag1, tag2, n1, n2;

	if(isvoid(t1) && isvoid(t2))
		return 1;

	if(isbase(t1) && isbase(t2))
		return baseid(t1) == baseid(t2);

	if(isundeftype(t1) && isundeftype(t2))
		return typenameequal(subtype(t1), subtype(t2));

	if(istypedef(t1) && istypedef(t2)){
		if(typedefid(t1) != typedefid(t2))
			return 0;
		return typenameequal(typedeftype(t1), typedeftype(t2));
	}

	if(isptr(t1) && isptr(t2))
		return typenameequal(subtype(t1), subtype(t2));

	if(isarray(t1) && isarray(t2)){
		n1 = arraynelm(t1);
		n2 = arraynelm(t2);
		if(n1 != n2)
			return 0;
		return typenameequal(subtype(t1), subtype(t2));
	}

	if(isfunc(t1) && isfunc(t2)){
		if(!typenameequal(rettype(t1), rettype(t2)))
			return 0;
		ps1 = params(t1);
		ps2 = params(t2);
		if(length(ps1) != length(ps2))
			return 0;
		for(i = 0; i < length(ps1); i++){
			p1 = vecref(ps1, i);
			p2 = vecref(ps2, i);
			if(!typenameequal(paramtype(p1), paramtype(p2)))
				return 0;
		}
		return 1;
	}

	if(isbitfield(t1) && isbitfield(t2)){
		if(bitfieldpos(t1) != bitfieldpos(t2))
			return 0;
		if(bitfieldwidth(t1) != bitfieldwidth(t2))
			return 0;
		return typenameequal(bitfieldcontainer(t1),
				     bitfieldcontainer(t2));
	}

	if(issu(t1) && issu(t2)){
		if(isstruct(t1) && !isstruct(t2))
			return 0;
		if(isstruct(t2) && !isstruct(t1))
			return 0;
		tag1 = suetag(t1);
		tag2 = suetag(t2);
		if(strstr(tag1, "anon_") != @nil
		   && strstr(tag2, "anon_") != @nil){
			return 1;
		}
		return tag1 == tag2;
	}

	if(isenum(t1) && isenum(t2)){
		tag1 = suetag(t1);
		tag2 = suetag(t2);
		if(strstr(tag1, "anon_") != @nil
		   && strstr(tag2, "anon_") != @nil)
			return 1;
		return tag1 == tag2;
	}

	return 0;
}


@define typeequal(t1, t2){
	@local i, j, flds1, flds2, ps1, ps2, p1, p2,
               f1, f2, c1, c2, tag1, tag2, n1, n2;

	if(isvoid(t1) && isvoid(t2))
		return 1;

	if(isbase(t1) && isbase(t2))
		return baseid(t1) == baseid(t2);

	if(isundeftype(t1) && isundeftype(t2))
		return 1;

	if(istypedef(t1) && istypedef(t2)){
		if(typedefid(t1) != typedefid(t2))
			return 0;
		return typenameequal(typedeftype(t1), typedeftype(t2));
	}

	if(isptr(t1) && isptr(t2))
		return typeequal(subtype(t1), subtype(t2));

	if(isarray(t1) && isarray(t2)){
		n1 = arraynelm(t1);
		n2 = arraynelm(t2);
		if(n1 != n2)
			return 0;
		return typeequal(subtype(t1), subtype(t2));
	}

	if(isfunc(t1) && isfunc(t2)){
		if(!typeequal(rettype(t1), rettype(t2)))
			return 0;
		ps1 = params(t1);
		ps2 = params(t2);
		if(length(ps1) != length(ps2))
			return 0;
		for(i = 0; i < length(ps1); i++){
			p1 = vecref(ps1, i);
			p2 = vecref(ps2, i);
			if(!typeequal(paramtype(p1), paramtype(p2)))
				return 0;
		}
		return 1;
	}

	if(isbitfield(t1) && isbitfield(t2)){
		if(bitfieldpos(t1) != bitfieldpos(t2))
			return 0;
		if(bitfieldwidth(t1) != bitfieldwidth(t2))
			return 0;
		return typeequal(bitfieldcontainer(t1), bitfieldcontainer(t2));
	}

	if(issu(t1) && issu(t2)){
		if(isstruct(t1) && !isstruct(t2))
			return 0;
		if(isstruct(t2) && !isstruct(t1))
			return 0;
		tag1 = suetag(t1);
		tag2 = suetag(t2);
		if(strstr(tag1, "anon_") != @nil
		   && strstr(tag2, "anon_") != @nil){
			printf("skipping %t %t\n", t1, t2);
			return 1;
		}
		if(susize(t1) != susize(t2))
			return 0;
		flds1 = fields(t1);
		flds2 = fields(t2);
		if(length(flds1) != length(flds2))
			return 0;
		for(i = 0; i < length(flds1); i++){
			f1 = vecref(flds1, i);
			f2 = vecref(flds2, i);
			if(fieldoff(f1) != fieldoff(f2))
				return 0;
			if(fieldid(f1) != fieldid(f2))
				return 0;
			if(!typenameequal(fieldtype(f1), fieldtype(f2)))
				return 0;
		}
		return 1;
	}

	if(isenum(t1) && isenum(t2)){
		tag1 = suetag(t1);
		tag2 = suetag(t2);
		if(strstr(tag1, "anon_") != @nil
		   && strstr(tag2, "anon_") != @nil)
			return 1;
		cs1 = enumconsts(t1);
		cs2 = enumconsts(t2);
		if(length(cs1) != length(cs2))
			return 0;
		for(i = 0; i < length(cs1); i++){
			c1 = vecref(cs1, i);
			for(j = 0; j < length(cs2); j++){
				c2 = vecref(cs2, j);
				if(vecref(c1, 0) == vecref(c2, 0)
				   && vecref(c1, 1) == vecref(c2, 1))
					break;
			}
			if(j >= length(cs2))
				return 0;
		}
		return 1;
	}

	return 0;
}

@define nsdiff(ns1, ns2){
	@local u1, u2, diff, nsdiff0, name1, name2;

	name1 = nameof(ns1);
	name2 = nameof(ns2);
	if(name1 == @nil)
		name1 = "ns1";
	if(name2 == @nil)
		name2 = "ns2";

	@define nsdiff0(ns1, ns2){
		@local t2, undef;

		undef = mktab();
		foreach(@lambda(k, t1){
				/* skip anonymous types */
				if((issu(t1) || isenum(t1))
				   && strstr(suetag(t1), "anon_") != @nil)
					return;
				t2 = ns2.looktype(t1);
				if(t2 == @nil)
					tabinsert(undef, t1, t1);
				else if(!typeequal(t1, t2))
					tabinsert(diff, t1, t1);
			}, ns1.enumtype());
		return undef;
	}


	diff = mktab();
	u2 = nsdiff0(ns1, ns2);
	u1 = nsdiff0(ns2, ns1);

	if(length(u2) > 0){
		printf("in %s but not %s:\n", name1, name2);
		foreach(@lambda(t,ignore){
				printf("\t%t\n", t);
			}, u2);
	}
	if(length(u1) > 0){
		printf("in %s but not %s:\n", name2, name1);
		foreach(@lambda(t,ignore){
				printf("\t%t\n", t);
			}, u1);
	}
	if(length(diff)){
		printf("differences between %s and %s:\n", name1, name2);
		foreach(@lambda(t,ignore){
				printf("\t%t\n", t);
			}, diff);
	}
}

@define printtype(t){
	@local ct, i, fld, flds, sz, off;

	if(issu(t)){
		printf("%s %s {\n", suekind(t), suetag(t));
		flds = fields(t);
		for(i = 0; i < veclen(flds); i++){
			fld = vecref(flds, i);
			off = fieldoff(fld);
			ft = fieldtype(fld);
			id = fieldid(fld);
			if(off == @nil){
				printf("\t");
				printf("\t%t;\n", fld);
			}else if(isbitfield(ft)){
				printf("\t/*@@(8*0x%x+%x)*/",
				       off, bitfieldpos(ft));
				printf("\t%t %s : %d;\n",
				       bitfieldcontainer(ft), id,
				       bitfieldwidth(ft));
			}else{
				printf("\t/*@0x%x*/", off);
				printf("\t%t;\n", fld);
			}
		}
		sz = susize(t);
		if(sz != @nil)
			printf("\t/*@0x%x;*/\n", sz);
		printf("};\n");
	}else if(istypedef(t)){
		printf("typedef %t %s\n", typedeftype(t), typedefid(t));
	}else if(isenum(t)){
		printf("%s %s {\n", suekind(t), suetag(t));
		ens = enumconsts(t);
		for(i = 0; i < veclen(ens); i++){
			en = vecref(ens, i);
			printf("\t%s = %d,\n", vecref(en, 0), vecref(en, 1));
		}
		printf("};\n");
	}
}

@define printns(ns){
	@local i, vec;
	vec = tabvals(ns.enumtype());
	for(i = 0; i < veclen(vec); i++)
		printtype(vecref(vec, i));
	vec = tabvals(ns.enumsym());
	for(i = 0; i < veclen(vec); i++){
		@local sym, off, type;
		sym = vecref(vec, i);
		type = symtype(sym);
		if(isenumconst(type))
			continue;
		off = symoff(sym);
		if(off != @nil)
			printf("/*@0x%x*/", off);
		printf("\t%t;\n", sym);
	}
}
