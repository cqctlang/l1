

@defstx @init_profile() {
	@global profiles, profentries;
	profiles = mktab(@lambda() {
			 	return [0,  // count
					0,  // time
					0,  // expansions
					nil]; // location
			 });
	profentries = [:];
	return #[];
}
@init_profile();

@defstx @profile(rest ...) body {

	@local ssym, rsym, lsym, nsym, bsym, csym, name, src, elist;
	@local goto_ret_block, have_ret;
	@local goto_break_block, have_break;
	@local goto_continue_block, have_continue;
	@local goto_goto_blocks, have_goto;
	@local warp_block,unwarp_block;
	@local accounting_block;
	@local multi_rewriter;
	@local internal_labels;
	@local get_labels;

	src = stxsrc(body);

	if(rest[0]) {
		name = rest[0];
		if(stxkind(name) != 'val)
			error("@profile: arg 0 must be a value");
	} else {
		if(isnil(src[1]))
			name = sprintfa("%s",src[0]);
		else
			name = sprintfa("%s:%d",src[0],src[1]);
		name=mkstxval(name);
	}

	if(stxkind(body[0][0]) != 'null) {
		error("error: %s%s syntax error: no bindings in profile body without a new block",
			src[0],
			isnil(src[1])?"":sprintfa(":%d", src[1]));
	}

	ssym=mkstxval(stxid(gensym()));
	lsym=gensym();
	nsym=gensym();
	rsym=gensym();
	bsym=gensym();
	csym=gensym();

	profiles[stxval(name)][2]++;
	profiles[stxval(name)][3] = src;

	elist = body[0][1];

	goto_goto_blocks=#[];

	// todo:
	// handle break in switch
	// handle escapes with dynamic wind
	// handle recursion

	accounting_block = #`{
		{
			@local t,l;

			t = profiles[#,(name)];
			l = profentries[#,(ssym)];
			t[0]++;
			if(!isnil(l))
				t[1] += gettimeofday()-l;
			else
				fprintf(stderr,"@profile: accounting disrupted by non-local entry\n");
		}
	};

	multi_rewriter = @lambda(v,isinner) {
		if(stxkind(v) == 'ret) {
			have_ret = 1;
			#`{ #,(rsym) = #,(v[0]); goto #,(lsym); };
		} else if( (stxkind(v) == 'break) && !isinner) {
			have_break = 1;
			#`{ goto #,(bsym); };
		} else if( (stxkind(v) == 'continue) && !isinner) {
			have_continue = 1;
			#`{ goto #,(csym); };
		} else if(stxkind(v) == 'scope) {
			#scope(multi_rewriter(v[0],isinner));
		} else if(stxkind(v) == 'block) {
			// return, continue, break are keywords
			// we don't need to check for aliases
			#block(v[0], multi_rewriter(v[1],isinner));
		} else if(stxkind(v) == 'if) {
			if(v[2])
				#if(v[0], multi_rewriter(v[1],isinner),
					  multi_rewriter(v[2],isinner));
			else
				#if(v[0], multi_rewriter(v[1],isinner));
		} else if(stxkind(v) == 'while) {
			#while(v[0], multi_rewriter(v[1],1));
		} else if(stxkind(v) == 'for) {
			#for(v[0], v[1], v[2], multi_rewriter(v[3],1));
		} else if(stxkind(v) == 'do) {
			#do(multi_rewriter(v[0],1), v[1]);
		} else if(stxkind(v) == 'label) {
			v;
		} else if(stxkind(v) == 'goto) {
			if(ismember(internal_labels,v[0])) {
				return v;
			} else {
				@local tsym;

				tsym=gensym();
				have_goto = 1;
				goto_goto_blocks=#[
					#`{
						#,(tsym):
						#,(accounting_block);
						goto #,(v[0]);
					},
					goto_goto_blocks
				];
				return #goto(tsym);
			}
		} else if(stxkind(v) == 'elist) {
			map(@lambda(v) { multi_rewriter(v,isinner); }, v);
		} else
			v;
		// comma forms can't contain statements. no
		// need to check there.
	};
	internal_labels = [];
	get_labels = @lambda(v) {
		if(stxkind(v) == 'scope) {
			get_labels(v[0]);
		} else if(stxkind(v) == 'block) {
			get_labels(v[1]);
		} else if(stxkind(v) == 'if) {
			if(v[2]) {
				get_labels(v[1]);
				get_labels(v[2]);
			} else
				get_labels(v[1]);
		} else if(stxkind(v) == 'while) {
			get_labels(v[1]);
		} else if(stxkind(v) == 'for) {
			get_labels(v[3]);
		} else if(stxkind(v) == 'do) {
			get_labels(v[0]);
		} else if(stxkind(v) == 'label) {
			append(internal_labels,v[0]);
		} else if(stxkind(v) == 'elist) {
			foreach(get_labels, v);
		}
		// comma forms can't contain statements. no
		// need to check there.
	};

	get_labels(elist);
	elist = map(@lambda(v) { multi_rewriter(v, 0); }, elist);

	if(have_ret)
		goto_ret_block=#`{
			#,(lsym):
				#,(accounting_block);
				return #,(rsym);
		};
	else
		goto_ret_block=#[];

	if(have_break) {
		goto_break_block=#`{
			#,(bsym):
				#,(accounting_block);
				break;
		};
	} else
		goto_break_block=#[];

	if(have_continue) {
		goto_continue_block=#`{
			#,(csym):
				#,(accounting_block);
				continue;
		};
	} else
		goto_continue_block=#[];

	if(have_ret || have_break || have_continue || have_goto) {
		warp_block=#`{
			goto #,(nsym);
		};
		unwarp_block=#`{
			#,(nsym): ;
		};
	} else {
		warp_block=#[];
		unwarp_block=#[];
	}

	return #`{
		profentries[#,(ssym)]=gettimeofday();
		{ @global #,(rsym); }
		// just the elist, not the scope
		//#,(elist_pre);
		#,(rsym) = #,(elist); // this is unsound for recursive functions without dynamic wind
		#,(accounting_block);
		#,(warp_block);
		#,(goto_ret_block);
		#,(goto_break_block);
		#,(goto_continue_block);
		#,(goto_goto_blocks);
		#,(unwarp_block);
		#,(rsym);
	};
}

{
	@global print_profiling;

	@define print_profiling(fd...) {
		@local tkeys;
		@global profiles;

		if(length(fd)>0) {
			fd = fd[0];
		} else {
			fd = stdout;
		}

		tkeys = tabkeys(profiles);
		sort(tkeys, strcmp);

		fprintf(fd, "===================================================\n");
		fprintf(fd, "             profile site    ");
		fprintf(fd, "   time (us)    ");
		fprintf(fd, " calls\n");
		fprintf(fd, "---------------------------------------------------\n");

		foreach(@lambda(k) {
			@local v;
			v = profiles[k];
			fprintf(fd, "%25s    %12d    %6d\n", k, v[1], v[0]);
		}, tkeys);

		fprintf(fd, "===================================================\n");

    }

}
