
define profile(thunk)
{
	@local ptab, l, m, i;

	profon();
	thunk();	
	ptab = profoff();

	l = [];
	foreach(lambda(k, v){
			append(l, [v,k]);
		}, ptab);
	sort(l, lambda(la, lb) {
		     @local a, b;
		     a = listref(la, 0);
		     b = listref(lb, 0);
		     if(a < b)
			     return 1;
		     else if(a > b)
			     return -1;
		     else
			     return 0;
	     });
	m = length(l);
	if(m > 100)
		m = 100;
	if(m == 0)
		printf("execution was too short to profile\n");
	for(i = 0; i < m; i++){
		@local e;
		e = listref(l, i);
		printf("%d\t%s\n", listref(e, 0), listref(e, 1));
	}
}

//define profinsn()
profinsn = lambda()
{
	@local tab, l, key, vals, i, lim;

	tab = insncnt();
	l = [];
	keys = tabkeys(tab);
	vals = tabvals(tab);
	for(i = 0; i < length(keys); i++)
		append(l, [ keys[i], vals[i] ]);
	sort(l, lambda(a,b) {
			if(a[1] < b[1])
				return 1;
			else if(a[1]>b[1])
				return -11;
			else
			return 0;
		});
	lim = 100;
	if(length(l) < lim)
		lim = length(l);
	for(i = 0; i < lim; i++){
		if(l[i][1] == 0)
			break;
		printf("%6u\t%s\n", l[i][1], l[i][0]);
	}
};
