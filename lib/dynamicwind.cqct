@global dynamicwind, syscallcc;

{
	@local winders;

	winders = nil;
	syscallcc = callcc;

	@defloc listtail(l, n)
	{
		if(n == 0)
			return l;
		return listtail(cdr(l), n-1);
	}

	@defloc commontail(x, y)
	{
		@local lx, ly;

		lx = length(x);
		ly = length(y);

		@defloc loop(x, y)
		{
			x = (lx > ly) ? listtail(x, lx-ly) : x;
			y = (ly > lx) ? listtail(y, ly-lx) : y;
			if(eq(x, y))
				return x;
			else
				return loop(cdr(x), cdr(y));
		}
		return loop(x, y);
	}

	@defloc dowind(new)
	{
		@local tail;

		@defloc lout(ls)
		{
			if(!eq(ls, tail)){
				winders = cdr(ls);
				cdr(car(ls))();
				lout(cdr(ls));
			}
		}

		@defloc lin(ls)
		{
			if(!eq(ls, tail)){
				lin(cdr(ls));
				car(car(ls))();
				winders = ls;
			}
		}

		tail = commontail(new, winders);
		lout(winders);
		lin(new);
	}

	@define callcc(f)
	{
		syscallcc(@lambda(k){
				@local save, r;
				save = winders;
				r = mkcontinuation(continuationfr(k),
						   @lambda(val){
							   if(!eq(save, winders))
								   dowind(save);
							   printf("dynamicwind callcc: finished dowind\n");
							   printf("invoking:\n");
							   dumpk(k);
							   continuationfn(k)(val);
						   });
				f(r);
			});
	}

	@define dynamicwind(in, body, out)
	{
		@local rv;
		in();
		winders = cons(cons(in, out), winders);
		rv = body();
		winders = cdr(winders);
		out();
		return rv;
	}
}
