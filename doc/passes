parse
types - convert type name and decl expressions into Decls

ns - expand @names to mkrawns call
a  
   m - expand multiple return value expression
   arrow - expand x->f into (*x).f
   a - disambiguate a[i] and a.x
   c - expand a[i] into *(a+i)

   [ arrow, aref forms eliminated; remaining dot forms are against cvals ]
0
   checkctl - check that break/continue only occur within control structure
   checkgoto - check goto target scope (only within same lambda?)
   groom - various expansion and canonicalization
           ?: -> if
           ,  -> sequence
           canonicalize if with empty consequent or alternate bodies
   rval/lval  - expand C type and memory access syntax into calls

g - expand ++, +=, etc, into primitive binops

l - expand && and || into if

i - expand loops and switch into labels+goto
  - all control flow is call to lambda/label and return
  - some (goto,switch) control transfers may span binding sites

1 - various expansions
    - table and list initializers into mktabl and mklist calls
    - sizeof, containerof, typeof expansion into calls
    - expand lapply into lambda wrapped arguments

2 - identify toplevel bindings
    make implicit local bindings explicit

v - box analysis
    free variable analysis
    frame allocation
    non-local frame initialize (goto plan)

cg - code generator
    - patch control transfers that span binding sites

---

rewrite


b - new version of 2
    - uncover and bind new top-level variables
      - any identifier appearing at toplevel (outside of Escope)
        is bound into toplevel, if not already
    - uncover and bind implicit local variables, removing Escope
    - covert all usage of toplevel variables to Etid, Etg forms

u - alpha-convert locals

x - assignment conversion
    for all assigned variables
     create box at @local site
     replace access and set with explicit box access

c - closure conversion
    - collect lambdas to letrecs
    - free var analysis
    - convert closures
    - lift letrecs

- normalize control
  - rewrite all lambdas so that non-local transfers
    are tail calls to other labels
  - thread gotos through binding sites by
    abstracting binding code

- normalize expression context
- specify primitive reps
- remove lets

- uil -> x86
