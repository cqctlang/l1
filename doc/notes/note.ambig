compiling ambiguous lvalue expressions
--------------------------------------

The C array reference (aref) and dot operators have two
jobs in Cinquecento.

Their most important job is to reference a location in
a C aggregate data type (array or struct/union) with
the same power and meaning they have in C.

Their second job is one of convenience: to access
Cinquecento data structures.

In particular:

* The aref operator can access the elements of
  Cinquecento containers (lists, vectors, tables,
  strings).

	x = a[i];	// read element i of container A
	a[i] = 2;	// set element i of A to 2
	a[i]++;		// increment element i of A

* The dot operator can access the fields of records.

	x = R.F;	// read field F of record R
	R.F = 2;	// set field F of R to 2
	R.F++;		// increment field F of R

* The dot operator can also reference the methods of
  name spaces, address spaces, and domains.

	x = O.FN();	// call O's method named FN
	f = O.FN;	// bind f to a function that
			// calls the FN method of O

Thus expressions involving aref and dot can be
ambiguous.  How do we disambiguate these expressions?
It turns out some disambiguation can be done at compile
time, and other disambiguation must be performed by
additional code executed at run time.

Consider the expression

	A[i].F

If A references a C array, then A[i] references an
element.  For the entire expression to be valid, that
element must be some C aggregate with a field named F.

On the other hand, if A references a container, then
A[i] can be any first-class Cinquecento value to which
the dot operator may be applied, namely a record, name
space, address space, or domain.  Note that A[i] cannot
be a C aggregate, because such values are not
first-class objects that can be stored in Cinquecento
data structures.

Now consider

	A[i][j]

Similar to A[i].F, if A references a C array, then A[i]
must be a C pointer or array for A[i][j] to be valid.

On the other hand, if A references a container then
A[i] could be a container or a cvalue.  If it is a
cvalue, it must be a pointer-typed cvalue; in this case
A[i][j] is a reference to a location in a domain.

These examples are difference because cvalues can by
operated upon by the aref operator but not the dot
operator.
