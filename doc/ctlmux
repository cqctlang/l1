ctlmux is a Cinquecento library for tracing
the execution of running programs.

ctlmux defines two abstractions:

* A ctl represents a traced execution.  An execution
  corresponds to a single-threaded process or one 
  thread of a multi-threaded process.

  Events in the traced execution --- death, signals,
  system calls, creation of a new thread, execution of
  a new program, arrival at a breakpoint --- are
  reflected as ctl events.  Users register handler
  functions to be called in response to ctl events.

  Behind every ctl are two Cinquecento address spaces
  that reflect the current state of the execution's
  memory and its registers.  Ctls for a multi-threaded
  process usually share a memory address space, while
  each ctl has its own register address space.

* A mux is a multiplexor of ctl events over a set of
  concurrently executing ctls.

Include the cltmux library:

	@include <ctlmux.cqct>

Begin with a fresh mux.

	mux = ctlmux();

This mux can control threads and processes on the local
machine, but not (for now) those on other machines.

Tell the mux to launch a new program ...

	ctl = mux.launch([cmd, arg, ...], flags);

	[cmd, arg, ...] is the list of arguments used
	to exec the program; i.e., argv[0] = cmd,
	argv[1] = arg, ...

... or to attach to an existing thread.

	ctl = mux.attach(pid);
