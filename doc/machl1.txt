=====================
L1's Bytecode Machine
=====================

This file provides some technical documentation of machl1, the instruction set
implemented in L1. machl1 is a continuation-enabled stack based machine with a
single register.

Last edited: 2015-02-18

Registers
---------

L1's bytecode uses the following registers:

+-------------+-------------------+----------------+
|  register   |  purpose          |  type          |
+-------------+-------------------+----------------+
|  %fp        |  Frame pointer    |  Val           |
|  %cl        |  Current closure  |  Closure       |
|  %pc        |  Program counter  |  Instruction   |
|  %vc        |  Argument count   |  Immediate     |
|  %ac        |  General purpose  |  Val           |
+-------------+-------------------+----------------+

l1 also contains a table called toplevel. This table maps names of global
variables to their values. The global variable toplevel is generally bound to
this table during execution.


Opcodes
-------

Each L1 instruction can have two operands, op1 and op2, and a destination dst.
Generally, operations are done on op1 and op2 and the result is stored in dst.
Each L1 instruction can also have either an unsigned 32 bit dstidx or a signed
64-bit scnt value. In the below descriptions, only the mentioned values need
to be included for the opcode to be correct. Some opcodes also use arguments
off of the stack. These start at %fp+2 and are referred to as arg0,arg1,...

Each operand may be one of several types. When not explicitly stated, the
operand may be anything except an immediate. Operands that must be immediates
are stated as (immediate)op.

+------------+----------------------------------------------------------------+
|  Opcode    |  description                                                   |
|------------+----------------------------------------------------------------+
|  abort     |  Halts execution                                               |
|  add       |  Stores op1 + op2 in dst                                       |
|  addfp     |  Adds scnt to fp (note: scnt may be negative)                  |
|  and       |  Stores op1 & op2 in dst                                       |
|  apply     |  Run function arg0 with parameters arg1,...,argn               |
|  argc      |  Check that %vc equals (immediate)op1, throw an error if not   |
|  box       |  Box the operand in op1                                        |
|  box0      |  Box nil and put it in op1                                     |
|  call      |  Call the function in op1: %fp[0]=%pc, %cl=op1, %pc=entry(%cl) |
|  call2     |  Run an call instruction after incrementing stack by scnt      |
|  callt     |  Call the function in op1 without recording the return address |
|  chkcl     |  Throw an error if op1 is not a closure                        |
|  chkint    |  Check if an interrupt has occurred, handle it if so           |
|  chksp     |  Ensure the stack can handle (immediate)op1 more bytes         |
|  cmpeq     |  Stores op1 == op2 in dst                                      |
|  cmpgt     |  Stores op1 > op2 in dst                                       |
|  cmpge     |  Stores op1 >= op2 in dst                                      |
|  cmplt     |  Stores op1 < op2 in dst                                       |
|  cmple     |  Stores op1 <= op2 in dst                                      |
|  cmpneq    |  Stores op1 != op2 in dst                                      |
|  div       |  Stores op1 / op2 in dst                                       |
|  gcpoll    |  Run the garbage collector if necessary                        |
|  halt      |  Sets %cl=%fp[1], %pc=%fp[0], and returns from the interpreter |
|  inv       |  Stores ~op1 in dst                                            |
|  iret      |  Return and decrement %fp: %cl=%fp[1], %pc=%fp[0], %fp-=arg0   |
|  jmp       |  Adds scnt to pc (note: scnt may be negative)                  |
|  jnz       |  If op1 is not false (nil or zero), increment pc by scnt       |
|  jz        |  If op1 is false (nil or zero), increment pc by scnt           |
|  kg        |  Calls %fp[2] (arg0) with the current continuation as arg0     |
|  kp        |  Resumes the closure in the %cl register                       |
|  mod       |  Stores op1 % op2 in dst                                       |
|  mov       |  Stores op1 in dst                                             |
|  movvc     |  Stores (immediate)op1 in %vc                                  |
|  mul       |  Stores op1 * op2 in dst                                       |
|  neg       |  Stores -op1 in dst                                            |
|  not       |  Stores !op1 in dst                                            |
|  nop       |  No-op. Does nothing                                           |
|  or        |  Stores op1 | op2 in dst                                       |
|  ret       |  Returns from a function: %cl=%fp[1], %pc=%fp[0]               |
|  shl       |  Stores op1 << op2 in dst                                      |
|  shr       |  Stores op1 >> op2 in dst                                      |
|  sub       |  Stores op1 - op2 in dst                                       |
|  underflow |  Resumes continuation in klink                                 |
|  vargc     |  Sets stack[(imm)op1+1] to be a list of arguments (imm)op1 to  |
|            |  %vc on the stack                                              |
|  xcast     |  Casts op2 to op1, storing the result in dst                   |
|  xor       |  Stores op1 ^ op2 in dst                                       |
+------------+----------------------------------------------------------------+


Operands
--------

Instructions use operands, which reference data in registers, in the frame,
or from the toplevel. In the below, idx is a 16-bit unsigned integer encoded
in the operand. The operand types are:

+-------------------+--------------------------------------------------------+
|  Type             |  Contents                                              |
+-------------------+--------------------------------------------------------+
|  reg              |  Reference to %ac, %fp, or %cl                         |
|  frame            |  Reference to %fp[idx]                                 |
|  disp             |  Reference to data at offset idx in closure %cl        |
|  topl             |  Reference to named variable from the toplevel         |
|  topr             |  A pair whose cdr is the stored Val                    |
|  val              |  A Val stored in the operand                           |
|  nil              |  The value nil                                         |
|  imm              |  An immediate value                                    |
+-------------------+--------------------------------------------------------+

Note that many of these operand types do not make sense for certain
operations: for instance, one cannot store anything in an imm type operand, so
they are invalid dst operands for the various binary operations (xor, sub,
shr, shl, etc).

Frame Layout
------------

The frame is stored in %fp, which points into the stack. During normal
operation, the frame's layout is as follows:

+-----------+----------------------+
| %fp[off]  |  value               |
+-----------+----------------------+
| %fp[0]    |  return address      |
| %fp[1]    |  return closure      |
| %fp[2]    |  arg0                |
| %fp[3]    |  arg1                |
| ...       |  ...                 |
| %fp[2+n]  |  argn*               |
| %fp[3+n]  |  locals              |
| ...       |  ...                 |
+-----------+----------------------+

* The number of arguments is stored in %vc (in the above example, %vc=n+1).

Normal code is expected to modify only the arguments and locals in its frame,
and to leave values in other frames untouched. Cleaning up the frame by
decrementing %fp is the responsibility of the calling function, who will know
the size of its own frame and therefore the correct amount to decrement %fp.


Standard Call Idiom
-------------------

Note that the call instructions will set the return address but not the
closure. As such, it is the caller's responsibility to set the closure before
running any call instructions.

The standard sequence of instructions leading to a call is the following:

mov %cl ($nfp+1)(%fp)
mov arg0 ($nfp+2)(%fp)
mov arg1 ($nfp+3)(%fp)
...
mov <fn> %ac
chkcl %ac
movvc $narg
addfp $nfp
call %ac
addfp -$nfp
chksp $max

Where $nfp is the size of the frame at that point, and $max is the maximum
frame size for the current function, and $narg is the number of arguments.


Non-vm Calls
------------

There are functions that are not implemented in machl1, but instead using the
machine code of the underlying processor. These functions look just like VM
functions, except that during their execution, the VM is paused. These non-vm
functions can re-enter the VM by using ccall to call functions defined via l1
bytecode. However, when re-entered, garbage collection is disabled.


Closures
--------

To support lexical scoping, l1 uses closures. A closure is a code object and
an array of values associated with the current context. Each element of the
array of values maps to a variable and may be referenced via a disp type
opcode operand (when the closure is in %cl). The code inside of the closure
can assume constant disp offsets (i.e. the same offset references the same
value). l1 exports the mkcl function for creating closures from code objects.


Vals
----

Except for the stack, all objects in l1 are stored as a Val. The memory for
each Val starts with a pointer-sized field called bits that is either a
forwarding pointer or the kind of Val stored at that location. When bit zero
of that field is not set, it is to be treated as the kind of object stored at
that location. Otherwise, the field  is to be treated as a forwarding pointer.
The forwarding pointer is used by the garbage collector to update object
references to the location of that object after a given garbage collection
phase.

The proper functioning of this mechanism depends upon the least significant
bit of all forwarding pointers being 0, which is guaranteed by the malv
memory allocation function.


The Heap
--------

l1 maintains a single global heap of memory. The heap consists of segments
sized Segsize, aligned on Segsize boundaries. Each segment is labelled with
a number, a generation, a metatype, and some information for the garbage
collector. The information is stored in the global segmap. The metatypes that
a segment may be are:

+-------------+------------------------------------------+
|  Type       |  Meaning                                 |
+-------------+------------------------------------------+
|  MThole     |  An unmapped segment                     |
|  MTnix      |  A segment that will be freed            |
|  MTfree     |  An unused segment                       |
|  MTweak     |  A segment containing only weak pairs    |
|  MTbox      |  A segment containing only boxed values  |
|  MTmutable  |  A segment containing mutable values     |
|             |  (i.e. ctypes, vecs, lists and tabs)     |
|  MTdata     |  A segment containing other objects      |
|  MTbigdata  |  A segment containing large objects      |
|  MTstack    |  A segment containing a VM stack         |
|  MTcode     |  A segment containing code objects       |
|  MTbigcode  |  A segment containing big code objects   |
+-------------+------------------------------------------+

All types except the MThole, MTnix, MTfree and MTweak are considered during
garbage collection.


Garbage Collection
------------------

Garbage collection occurs during a gcpoll instruction or via the l1 builtin
function gc. l1 uses a generational collector with three generations. This
variation of copying garbage collection maintains a generation number for each
heap segment. New allocations are from a segment with generation 0. Each time
an object survives a garbage collection, it is promoted to a higher generation
heap segment. Objects to be promoted are found via a reachability analysis
that has deep knowledge of which elements are pointers within each object
type. The reachability analysis starts with values in the current stack
(including any linked underflow stacks), the closure in %cl, the value in %ac,
and the values stored in the toplevel.

In order to ensure that pointers from older to newer generations are updated
properly, a card table is used. Each segment is divided into Ncard chunks, and
each chunk is represented by an entry in a card table. The card table entry
records if any pointer in the corresponding segment chunk has been updated
since the last garbage collection. The existence of this facility implies that
when one is modifying an object directly, one must update the corresponding
card table to let the garbage collector know of the change. The function gcwb
has been provided for this purpose.


TODO
----

The following topics have not been addressed, but should be:

Continuations, interrupts, locals, boxed vals
