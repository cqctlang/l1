(defun output-file (file)
  (let ((sp (split-string file "\\.src")))
    (if (not (= (length sp) 2))
	(error "invalid file name: %s" file))
    (apply 'concat sp)))

(defun doit (file)
  (interactive "fFile: ")
  (let* ((nfile (output-file file))
	 (buf (find-file-noselect nfile))
	 form result (n 0))
    (save-excursion
      (set-buffer buf)
      (erase-buffer)
      (insert-file-contents file)
      (goto-char (point-min))
      (while (re-search-forward "{ \\(.*\\)\; }" nil t)
	(setq form (cons (match-string 1) form)))
      (goto-char (point-min))
      (while (re-search-forward "\\(\".*\"\\)" nil t)
	(setq result (cons (match-string 1) result)))
      (erase-buffer)
      (setq form (reverse form))
      (setq result (reverse result))
      (while form
	(let ((f (pop form)) (r (pop result)))
	  (insert (format "//\ttest( %60s,   %-50s );\t// %3d\n" f r n))
	  (setq n (1+ n))))
      (save-buffer 0))
    (kill-buffer buf)))
