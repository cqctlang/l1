@include <ctlmux.cqct>

l1 = "../l1";
//l1 = "../l1.x";
l1names = l1+".names";

@define dumpcvals(dom)
{
	@local hp, p, q, w, n;

	hp = &dom`heap[dom`Qcval];
	q = hp->alloc;
	printf("begin search\n");
	n = 0;
	while(q){
		p = q;
		q = q->alink;
		n++;
		if(p->color == dom`GCfree || p->color == dom`GCfinal)
			continue;
		p = (dom`Cval*)p;
		w = (dom`Head*)p->dom;
		printf("%p: %e\n", p, w->qkind);
	}
	printf("%d Qcvals\n", n);
}

@define doit(args)
{
	@local mux, ns, as, dom, e, nexec, prctlpid;

	prctlpid = nil;
	nexec = 0;
	npop = 0;
	e = sprintfa("@names clp64le { @include \"%s\" };", l1names);
	ns = eval(e);
	mux = mkctlmux();
	push(args, l1);
	ctl = mux.launch(args, 0);
	as = ctl.mem();
	dom = mkdom(ns, as);
	dom.trace(ctlmux`Efork,
		  @lambda(ctl, newctl){
			  printf("fork %d -> %d\n", ctl.id, newctl.id);
			  if(ctl.id == prctlpid){
				  printf("releasing %d\n", newctl.id);
				  newctl.detach();
			  }
		  });
	dom.trace(ctlmux`Eexec,
		  @lambda(ctl){
			  nexec++;
			  printf("exec -> %d\n", ctl.id);
			  if(nexec == 1){
				  prctlpid = ctl.id;
				  printf("prctl is %d\n", ctl.id);
			  }
			  if(nexec > 1)
				  ctl.detach();
		  });
	dom.xtrap(&dom`finivm,
		  @lambda(ctl){
			  printf("vm is exiting\n");
//			  dumpcvals(dom);
			  return nil;
		  });
	dom.xcont();
	mux.run();
}

doit([ "tracemclones.cqct" ]);
