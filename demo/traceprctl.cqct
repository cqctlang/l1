@include <ctlmux.cqct>
l1 = "../l1";
l1names = l1+".names";
prctl = "../../prctl/prctl";
prnames = prctl+".names";

@define htforeach(f, ht)
{
	@local hp, i, sz;
	sz = ht->sz;
	for(i = 0; i < sz; i++){
		hp = ht->ht[i];
		while(hp){
			f(hp->key, hp->val);
			hp = hp->next;
		}
	}
}

@define enumctls(dom)
{
	@local fn, l;
	l = [];
	@define fn(k, v)
	{
		append(l, (`Ctl*)v);
	}
	htforeach(fn, dom`ctltab);
	return l;
}

@define checkctls(dom)
{
	@local notebp, ctls, as, bps;

	ctls = enumctls(dom);
	as = [:];
	bps = [:];

	@define notebp(bp)
	{
		if(bps[bp] == nil)
			bps[bp] = 1;
		else
			bps[bp]++;
	}

	foreach(@lambda(ctl){
			printf("ctl %d %p\n", ctl->id, ctl);
			as[ctl->as] = ctl->as;
			printf("braddr:\n");
			htforeach(@lambda(k,v)
				  {
					  @local addr, br;
					  addr = (`u64)k;
					  br = (`Brkref*)v;
					  printf("\t%x -> %d %p %x %d\n",
						 addr,
						 br->id,
						 br->bp,
						 br->bp->addr,
						 br->bp->cnt);
					  notebp(br->bp);
				  }, ctl->braddr);
			printf("brid:\n");
			htforeach(@lambda(k,v)
				  {
					  @local id, br;
					  id = (`u64)k;
					  br = (`Brkref*)v;
					  printf("\t%d -> %d %p %x %d\n",
						 id,
						 br->id,
						 br->bp,
						 br->bp->addr,
						 br->bp->cnt);
					  notebp(br->bp);
				  }, ctl->brid);
		}, ctls);
	foreach(@lambda(a,v)
		{
			printf("as %p\n", a);
			printf("bpaddr:\n");
			htforeach(@lambda(k,v)
				  {
					  @local addr, bp;
					  addr = (`u64)k;
					  bp = (`Brk*)v;
					  printf("\t%x -> %p %x %d\n",
						 addr,
						 bp,
						 bp->addr,
						 bp->cnt);
					  if(2*bp->cnt != bps[bp])
						  error("ref count! 2*%d != %d\n",
							bp->cnt, bps[bp]);
				  }, a->bpaddr);
		}, as);
}

@define doit(args)
{
	@local mux, l1ns, prns, as, dom, e, nexec, prctlpid, tracepr;

	@define tracepr(ctl)
	{
		@local dom;
		dom = mkdom(prns, ctl.mem());

		dom.xtrap(&dom`writemsg,
			  @lambda(ctl){
				  @local pd, xmsg, regs;
				  regs = ctl.reg();
				  pd = mkdom(prns, ctl.mem());
				  xmsg = (`Msg*){pd}regs->rsi;
				  printf("writemsg %e:\n",
					 (enum Mkind)xmsg->op);
				  checkctls(pd);
			  });
	}

	prctlpid = nil;
	nexec = 0;
	npop = 0;
	e = sprintfa("@names clp64le { @include \"%s\" };", l1names);
	l1ns = eval(e);
	e = sprintfa("@names clp64le { @include \"%s\" };", prnames);
	prns = eval(e);
	mux = mkctlmux_local();
	push(args, l1);
	ctl = mux.launch(args, 0);
	as = ctl.mem();
	dom = mkdom(l1ns, as);
	dom.trace(ctlmux`Efork,
		  @lambda(ctl, newctl){
			  printf("fork %d -> %d\n", ctl.id, newctl.id);
			  if(ctl.id == prctlpid){
				  printf("releasing %d\n", newctl.id);
				  newctl.detach();
			  }
		  });
	dom.trace(ctlmux`Eexec,
		  @lambda(ctl){
			  nexec++;
			  printf("exec -> %d\n", ctl.id);
			  if(nexec == 1){
				  prctlpid = ctl.id;
				  printf("prctl is %d\n", ctl.id);
				  tracepr(ctl);
			  }
			  if(nexec > 1)
				  ctl.detach();
		  });
	dom.xtrap(&dom`finivm,
		  @lambda(ctl){
			  printf("vm is exiting\n");
			  return nil;
		  });

	dom.xcont();
	mux.run();
}

doit([ "tracelist.cqct", "5", "10" ]);
