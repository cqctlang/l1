@include <ctlmux.cqct>
@include <sctlclt.cqct>
@include <dwunwind.cqct>

progs = [ "./wind1",
	  "./wind1.32",
	  "./wind2",
	  "./wind2.32" ];

@define fmtstack(pcs, lls)
{
	@local s, m;
	s = "";
	m = 0;
	foreach(@lambda(pc){
			@local ll;
			s += sprintfa("%016p\t%y\n", pc, pc);
			ll = lls[m++];
			if(ll)
				foreach(@lambda(l){
						s += sprintfa("\t%t\n", l);
					}, ll);
		}, pcs);
	return s;
}

@define try(prog)
{
	@local ctl, as, ns, dom, dvec, mux, xs, pcs, lls;

	printf("%s:\n", prog);
	mux = mkctlmux_local();
	ctl = mux.launch([prog], 0);
	as = ctl.mem();
	ns = ctl.ns();
	dom = mkdom(ns, as);
	dom.xtrap(&dom`f,
		       @lambda(ctl){
			       if(dvec == nil)
				       dvec = mkdvec(mux, ctl);
			       xs = dwunwind(dvec, ctl.reg());
			       pcs = map(@lambda(ctx){
					       @local v;
					       v = lookdvec(dvec, ctx->rip);
					       return {v.dom}ctx->rip;
				       }, xs);
			       lls = map(@lambda(ctx){
					       @local v, ll, ns;
					       v = lookdvec(dvec, ctx->rip);
					       ns = v.dom.ns;
					       ll = ns.enumloc(ctx);
					       if(ll)
						       ll = map(@lambda(l){
								       mksym(looktype(ns, l.type),
									     mkcid(l.id),
									     0);
							       }, ll);
					       return ll;
				       }, xs);
			       printf("%s\n", fmtstack(pcs, lls));
		       });
	dom.xcont();
	mux.run();
}

foreach(try, progs);
