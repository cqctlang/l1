
@include <dump.cqct>

@define keysorted_tabvals(t) {
	@local k,l;

	k=tabkeys(t);
	k=sort(k,@lambda(a,b) {

		strcmp(sprintfa("%t",a),sprintfa("%t",b));
	});
	return apply(vector,map(@lambda(v) {
		return t[v];
	},k));
};  

@define foo(){
	@local ns, fn, vec, i;

	ns = @names c32le {
		typedef struct foo foo_t;
		enum et {
			a = 1,
			b = 2,
			c = 3,
		};
		struct abc { int x; @0x4; };
		struct foo {
			@0x00 int x;
			@0x04 int y;
			@0x08 int z;
			@0x0c int *xp;
			@0x10 int (*foo)();
			@0x14 int (*bar)(void);
			@0x18 int (*baz)(int p1);
			@0x20 int (*baz)(int p1, struct foo *p2);
			@0x24 char *a[10];
			@0x30 struct blah {
				@0x0	int x;
				@@35	int y : 4;
				@0x8;
			} blahvar;
			@0x34 foo_t *ptrtofoo;
			@0x28;
		};
		struct bar {
			@0x0 int x, y;
			@0x8;
		};
		struct foo a;
		@0x100 struct t2 { int x; @0x4; } x;
		@0x100 struct t2 { int x, y; @0x8; } x;
		@0x100 struct t2 { int z; @0x4; } x;
	};

	fn = ns.enumtype();
	//printf("FN: %a\n",fn);
	vec = keysorted_tabvals(fn);
	for(i = 0; i < length(vec); i++)
		printtype(vec[i]);
};

foo();
