
@add_loadpath(loadpath()[0] + "/../test/libs");

arglib2 = @import_object(lib5(1000));
arglib2.printargs();

@with_imports ( (f1, lib3.f2), lib4 ) { 
  @defloc f4() { printf("Running f4 from main!\n"); } 
  printf("In main\n"); 
  f1(); 
  f3(); 
  f4(); 
  printf("constant c1's value: %a\n",c1); 
}

@with_imports ( lib3, lib4 ) { 
  1+1; 
}

printf("loading test\n");
@library(test) {
  @import( lib3 );
  @export( func );
  @define func() {
    f2();
  }
  printf("test(%a) loaded\n",args);
};

@with_imports( test ) {
  func();
}

@with_imports( test ) {
  func();
}

printf("loading test(10)\n");
@with_imports( test(10) ) {
  func();
}

@with_imports( subdir/sublib, (f2, subdir/sublib.fn1) ) {
  fn1();
  f2();
}

@with_imports( subdir/subdir2/sublib, (f2, subdir/subdir2/sublib.fn2) ) {
  fn2();
  f2();
}

x = "test";
y = "lib";
@dynamic_imports( x, y + "4" ) { func(); f3(); }
@dynamic_imports( "subdir"+"/"+"sublib" ) { fn1(); }
@dynamic_imports( "(f2, subdir/sublib.fn1)" ) { f2(); }

@with_imports ( (meme, subdir/sublib) )
{
  printf("with an object now\n");
  meme.fn1();
  meme.fn1();
  meme.fn1000();
  meme.fn1();
  /*
  applyk(@lambda() { meme.fn5(); }, 
         @lambda(ret) { printf("success\n"); },
         @lambda() { printf("expected error found\n"); },
         []);
  */

}

printf("Testing lone object import\n");
sublib = @import_object( subdir/sublib );
sublib.fn1();

arglib = @import_object(lib5(1,2,3,"abcde",[1,2,3]));
arglib.printargs();

arglib2 = @import_object(lib5(1000));
arglib2.printargs();
arglib.printargs();

@with_imports(test()) {}
@with_imports(test()) {}
@with_imports(test()) {}

//@with_imports( test(a) ) {
//}
