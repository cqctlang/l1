define listref(l, i){
	if(i == 0)
		return car(l);
	else
		return listref(cdr(l), i-1);
}

define mkzas(len){
	@local dispatch, str;
	str = string(len);
	define dispatch args {
		@local arg, range, s, new, beg, end;
		arg = listref(args, 0);

		if(arg == "get"){
			range = listref(args, 1);
			beg = rangebeg(range);
			end = beg+rangelen(range);
			printf("get %x %x\n", beg, end);
			return substr(str, beg, end);
		}

		if(arg == "put"){
			range = listref(args, 1);
			beg = rangebeg(range);
			end = beg+rangelen(range);
			new = listref(args, 2);
			strput(str, beg, new);
			printf("put %x %x\n", beg, end);
			return;
		}

		printf("bad argument to dispatch!\n");
	}
	return mkas(dispatch);
}

define main(){
	@local dom, ns, as, x, y;

	as = mkzas(1024);
	ns = @names c32le {
		struct foo {
			@0x0 int i;
			@0x4 int *p;
			@0x8;
		};
		@0x0	int x;
		@0x4	int y;
		@0x8	struct foo foo;
		@0x10	struct foo a[3];
	};
	dom = mkdom(ns, as);

	x = (dom`a[2].i)++;

	printf("after x = dom`a[2].i++: x = %d, dom`a[2].i = %d\n",
	       x, dom`a[2].i);

	dom`x += 1;
	printf("after dom`x += 1: dom`x = %d\n", dom`x);

	dom`a[2].i <<= 5;
	printf("after dom`a[2].i <<= 5: dom`a[2].i = %d\n",
	       dom`a[2].i);

	dom`a[2].i <<= 32-5;
	printf("after dom`a[2].i <<= 32-5: dom`a[2].i = %d\n",
	       dom`a[2].i);
}

main();
