define printtype(t){
	@local ct, i, fld, flds, sz, off;

	ct = cracktype(t);
	if(issu(t)){
		printf("%s %s {\n", suekind(t), suetag(t));
		flds = fields(t);
		for(i = 0; i < veclen(flds); i++){
			fld = vecref(flds, i);
			off = fieldoff(fld);
			if(!isnil(off))
				printf("\t@0x%x", off);
			else
				printf("\t");
			printf("\t%t;\n", fld);
		}
		sz = susize(t);
		if(!isnil(sz))
			printf("\t@0x%x;\n", vecref(ct, 3));
		printf("};\n");
	}else if(istypedef(t))
		printf("typedef %t;\n", ct);
};

define foo(){
	@local ns, fn, tab, vec, i;

 	ns = @names c32le {
 		typedef struct foo foo_t;
 		struct abc { int x; };
 		struct foo {
 			@0x00 int x;
 			@0x04 int y;
 			@0x08 int z;
 			@0x0c int *xp;
 			@0x10 int (*foo)();
 			@0x14 int (*bar)(void);
 			@0x18 int (*baz)(int p1);
 			@0x20 int (*baz)(int p1, struct foo *p2);
 			@0x24 char *a[10];
			@0x30 struct blah {
				@0x0	int x;
				@0x4	int y;
				@0x8;
			} blahvar;
			@0x34 foo_t *ptrtofoo;
 			@0x28;
 		};
 		struct bar {
 			@0x0 int x, y;
 		};
 		struct foo a;
		@0x100 struct t2 { int x; } x;
		@0x100 struct t2 { int x, y; } x;
		@0x100 struct t2 { int z; } x;
 	};

	fn = nsenumtype(ns);
	vec = tabvals(fn());
	for(i = 0; i < veclen(vec); i++)
		printtype(vecref(vec, i));
};

foo();
